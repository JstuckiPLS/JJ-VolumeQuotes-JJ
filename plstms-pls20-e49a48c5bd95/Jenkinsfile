node {
    def project = 'pls-logistics-services';
    def appName = 'pls20-app';
    def clusterName = 'pls-gke-dev-utility-private';
    env.nameSpace = "development";
    def mvnArgs = '-DprofileName=pls-int';
    def bldresult = '-1';
    env.imageTag = "us.gcr.io/${project}/${appName}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}";
    def slackChannel = '#tms-alerts-nonprod'
    def final zone = 'us-east1-c'
    def final slackSuccessColor = '#00FF00'
    def final slackFailColor = '#FF0000'


    try {
        stage('Checkout from VC and prebuild branch validation') {
            checkout scm;

            env.nameSpace = env.BRANCH_NAME;
            switch (env.BRANCH_NAME) {
                case "master":
                    env.nameSpace = "production";
                    clusterName = 'pls-cluster-prod';
                    slackChannel = '#tms-alerts'
                    break;
                case "development":
                    mvnArgs = '-P ProductionPreparation,skipSCA -DprofileName=pls-int';
                    break;
                default:
                    break;
            }
            env.imageTag = "us.gcr.io/${project}/${appName}:${env.nameSpace}.";
        }

      stage ('Build Clean Install') {
      	//if (env.nameSpace != 'production') {
      		sh("cp ui/src/main/webapp/resources/js/app-qa.js ui/src/main/webapp/resources/js/app.js;")
          sh("echo 'Updating App.js for Jasper URL';")
      	//}
          sh("mvn clean install ${mvnArgs};")
      }

      	stage ('Package, Push, and Deploy Docker Image') {
        	sh """ 
             gcloud config set project ${project};      
             gcloud container clusters get-credentials ${clusterName} --zone ${zone}

             k8Images=\$(kubectl get deployment/pls-${appName} -o jsonpath="{\$.spec.template.spec.containers[:1].image}" --namespace=${env.nameSpace});       
             k8ProdNo=\$(echo \$k8Images|xargs -d . -n1|tail -2);
             k8ProdNo=\$(((boromir=\$k8ProdNo+1)));
             echo \$k8ProdNo > commandResult;
             mvn package -fpom-war.xml -Ddocker.namespace=${env.nameSpace} -Ddockerfile.tag=${env.nameSpace}.\$k8ProdNo;
             docker push ${imageTag}\$k8ProdNo

             kubectl set image deployment/pls-${appName} ${appName}=${env.imageTag}\$k8ProdNo --namespace=${env.nameSpace};
             """
            bldresult = readFile('commandResult').trim()
            env.imageTag = "${env.imageTag}${bldresult}";
            slackSend (color: slackSuccessColor, channel: slackChannel, message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) . Docker Image Deployed: ${env.imageTag}");
        }
    } catch (e) {
        slackSend (color: slackFailColor, channel: slackChannel, message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})");
        throw e
    }

}
