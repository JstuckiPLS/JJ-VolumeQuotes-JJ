<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_ASSOCIATED_WITH_USER_BY_NAME">
        <![CDATA[
                select distinct c.id as organizationId, c.name as organizationName, case when 1=1 then true else true end as customer
                from CustomerEntity c
                left join c.customerUsers cu with cu.status = 'A' and cu.personId = :personId
                left join c.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :personId
                where upper(c.name) like :name
                    and (cu.personId is not null or nu.id is not null)
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_BY_NAME">
        <![CDATA[
                select c from CustomerEntity c where UPPER(c.name) = UPPER(:name)
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_BY_NAME_WITHOUT_ID">
        <![CDATA[
                select c from CustomerEntity c where c.name = :name and c.networkId = :networkId and c.id <> :customerId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_BY_FEDERAL_TAX_ID">
        <![CDATA[
                select c from CustomerEntity c where c.federalTaxId = :federalTaxId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_COUNT_CUSTOMERS_BY_ID">
        <![CDATA[
                SELECT COUNT(c) FROM CustomerEntity c WHERE c.id = :customerId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_PRODUCT_LIST_PRIMARY_SORT">
        <![CDATA[
                SELECT c.productListPrimarySort FROM CustomerEntity c WHERE c.id = :id
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_UPDATE_PRODUCT_LIST_PRIMARY_SORT">
        <![CDATA[
                UPDATE CustomerEntity c SET c.productListPrimarySort = :sort WHERE c.id = :id
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_FIND_CUSTOMERS_BY_NAME">
        <![CDATA[
                select distinct new com.pls.core.domain.bo.SimpleValue(c.id, c.name)
                from CustomerEntity c
                left join c.customerUsers cu with cu.status = 'A' and cu.personId = :personId
                left join c.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :personId
                where
                    ((c.status = :status and :status is not null) or :status is null)
                    and (LOWER(c.name) like :name)
                    and (cu.personId is not null or nu.id is not null)
                order by c.name
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_CREDIT_INFO">
        <![CDATA[
                SELECT c.federalTaxId, c.creditLimit
                FROM CustomerEntity c
                WHERE c.id = :orgId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_CREDIT_LIMIT">
        <![CDATA[
                SELECT creditLimit
                FROM CustomerEntity
                WHERE id = :customerId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_BY_STATUS_AND_NAME">
        <![CDATA[
                select
                    c.name as name,
                    c.contactFirstName as contactFirstName,
                    c.contactLastName as contactLastName,
                    c.contactEmail as email,
                    phone.dialingCode as dialingCode,
                    phone.areaCode as areaCode,
                    phone.phoneNumber as phoneNumber,
                    phone.extension as extension,
                    c.id as id,
                    c.ediAccount as ediNumber,
                    c.contract as contract,
                    case when count(distinct aeUser.id) > 1 then true else false end as multipleAccountExecitive,
                    case when count(distinct aeUser.id) > 1 then 'Multiple' else (max(aeUser.firstName) || ' ' || max(aeUser.lastName)) end as accountExecutive
                    from CustomerEntity c
                left join c.customerUsers cu with cu.status = 'A' and cu.personId = :personId
                left join c.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :personId
                left join c.phone phone
                left join c.locations cl with cl.status = 'A'
                left join cl.accountExecutives ae with ae.status = 'A' and LOCALTIMESTAMP between ae.effectiveDate and ae.expirationDate
                left join ae.user aeUser
                where
                    (n.name = :businessUnitName or :businessUnitName is null)
                    and c.status = :status
                    and (LOWER(c.name) like :name or :name is null)
                    and (cu.personId is not null or nu.id is not null)
                group by c.name,
                    c.contactFirstName,
                    c.contactLastName,
                    c.contactEmail,
                    phone.dialingCode,
                    phone.areaCode,
                    phone.phoneNumber,
                    phone.extension,
                    c.id,
                    c.ediAccount,
                    c.contract,
                    n.name
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_IS_CHANGED">
        <![CDATA[
                select
                    case when name = :name and federalTaxId = :taxId then false else true end
                from CustomerEntity
                where id = :id
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_ASSOCIATED_UNASSIGNED_BY_NAME">
        <![CDATA[
                SELECT c.id as customerId,
                       c.name as customerName,
                       case when count(distinct u.id) > 1 then 'Multiple Account Executives' else max(concat(u.firstName, ' ', u.lastName)) end as accountExecutive,
                       case when count(distinct u.id) > 1 then true else false end as multipleAE,
                       case when max(assignedCU.id) is not null then (
                          case when max(assignedCU.status) = 'A' then LOCALTIMESTAMP else max(assignedCU.modification.modifiedDate) end
                       ) else null end as unassignmentDate,
                       max(l.id) as locationId,
                       count(distinct l.id) as locationsCount
                from CustomerEntity c
                left join c.locations l
                left join l.accountExecutives ae with ae.status = 'A' and LOCALTIMESTAMP between ae.effectiveDate and ae.expirationDate
                left join ae.user u
                left join c.customerUsers assignedCU with assignedCU.locationId is null and assignedCU.personId = :userId
                left join c.customerUsers cu with cu.status = 'A' and cu.personId = :currentUserId
                left join c.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :currentUserId
                where
                    UPPER(c.name) like :criteria
                    and (nu.id is not null or (cu.personId is not null and cu.locationId = l.id))
                group by c.id, c.name
                ORDER BY c.name
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_ASSOCIATED_UNASSIGNED_BY_AE">
        <![CDATA[
                select c.id as customerId,
                       c.name as customerName,
                       case when count(distinct u.id) > 1 then 'Multiple Account Executives' else max(concat(u.firstName, ' ', u.lastName)) end as accountExecutive,
                       case when count(distinct u.id) > 1 then true else false end as multipleAE,
                       case when max(assignedCU.id) is not null then (
                          case when max(assignedCU.status) = 'A' then LOCALTIMESTAMP else max(assignedCU.modification.modifiedDate) end
                       ) else null end as unassignmentDate,
                       max(l.id) as locationId,
                       count(distinct l.id) as locationsCount
                from AccountExecutiveEntity filterAE
                join filterAE.user filterUser with UPPER(filterUser.firstName) || ' ' || UPPER(filterUser.lastName) like :criteria
                join filterAE.customer c
                left join c.locations l
                left join l.accountExecutives ae with ae.status = 'A' and LOCALTIMESTAMP between ae.effectiveDate and ae.expirationDate
                left join ae.user u
                left join c.customerUsers assignedCU with assignedCU.locationId is null and assignedCU.personId = :userId
                left join c.customerUsers cu with cu.status = 'A' and cu.personId = :currentUserId
                left join c.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :currentUserId
                where
                    filterAE.status = 'A' and LOCALTIMESTAMP between filterAE.effectiveDate and filterAE.expirationDate
                    and (nu.id is not null or (cu.personId is not null and cu.locationId = l.id))
                group by c.id, c.name
                ORDER BY c.name
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_CHECK_CUSTOMER_BY_ACTIVE_STATUS">
        <![CDATA[
                SELECT 1 FROM CustomerEntity AS c WHERE c.status = 'A' AND c.id = :customerId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_FIND_CUSTOMER_BY_EDI_NUMBER">
        <![CDATA[
                from CustomerEntity t
                where ediAccount = :ediNumber
                    and status = 'A'
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_CHECK_EDI_NUMBER_EXISTS">
        <![CDATA[
                select 1 from CustomerEntity t
                where t.ediAccount = :ediNumber
        ]]>
    </query>
    <sql-query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_ALL_ACCOUNT_EXECUTIVES">
        <![CDATA[
                SELECT u.PERSON_ID as "id", u.FIRST_NAME || ' ' || u.LAST_NAME as "name"
                FROM USERS u
                INNER JOIN USER_CAPABILITIES_XREF uc ON uc.PERSON_ID = u.PERSON_ID AND uc.STATUS = 'A'
                INNER JOIN CAPABILITIES c ON uc.CAPABILITY_ID = c.CAPABILITY_ID AND c.NAME = :capability
                WHERE
                    u.ORG_ID = :plsOrgId
                    AND u.STATUS = 'A'

                UNION

                SELECT u.PERSON_ID as "id", u.FIRST_NAME || ' ' || u.LAST_NAME as "name"
                FROM USERS u
                JOIN user_groups ug ON ug.person_id = u.person_id AND ug.status = 'A'
                JOIN groups ON ug.group_id = groups.group_id AND groups.status = 'A'
                JOIN GROUP_CAPABILITIES ON groups.GROUP_ID = GROUP_CAPABILITIES.GROUP_ID
                JOIN CAPABILITIES ON CAPABILITIES.CAPABILITY_ID = GROUP_CAPABILITIES.CAPABILITY_ID AND CAPABILITIES.NAME = :capability
                WHERE
                    u.status = 'A'
                ORDER BY 2
        ]]>
    </sql-query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_LOCATIONS_FOR_ASSOCIATED_CUSTOMER">
        <![CDATA[
                SELECT distinct
                      l.id as locationId,
                      l.locationName as locationName,
                      l.defaultNode as defaultNode,
                      u.firstName || ' ' || u.lastName as accountExecutive,
                      mod.modifiedDate as modifiedDate,
                      mu.firstName || ' ' || mu.lastName as modifiedBy
               from CustomerEntity c
               left join c.locations l with l.status = 'A'
               left join l.accountExecutives ae with ae.status = 'A' and LOCALTIMESTAMP between ae.effectiveDate and ae.expirationDate
               left join ae.user u
               left join c.customerUsers cu with cu.status = 'A' and cu.personId = :currentUserId
               left join c.network n
               left join n.networkUsers nu with nu.status = 'A' and nu.userId = :currentUserId
               left join l.customerLocationUsers clu with clu.status = 'A' and clu.personId = :userId
               left join clu.modification mod
               left join mod.modifiedUser mu
               where
                   c.id = :customerId
                   and (nu.id is not null or (cu.personId is not null and cu.locationId = l.id))
         ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_ASSIGNED_TO_USER">
        <![CDATA[
                SELECT c.id
                FROM CustomerEntity c
                left join c.locations l with l.status = 'A' and (:locationId is null or l.id = :locationId)
                left join c.customerUsers cu with cu.status = 'A' and cu.personId = :personId and (:locationId is null or cu.locationId = :locationId)
                left join c.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :personId
                WHERE
                    c.id = :customerId
                    and (nu.id is not null or cu.personId is not null)
                    and (:locationId is null or l.id = :locationId)
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_CREDIT_LIMIT_REQUIRED">
        <![CDATA[
                SELECT coalesce(n.requiredCreditLimit, 'N')
                FROM CustomerEntity org
                LEFT JOIN org.network n
                WHERE org.id = :customerId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_GET_INTERNAL_NOTE">
        <![CDATA[
                SELECT org.internalNote
                FROM CustomerEntity org
                WHERE org.id = :customerId
        ]]>
    </query>
    <query name="com.pls.core.domain.organization.CustomerEntity.Q_IS_PRINT_BARCODE">
        <![CDATA[
                SELECT printBarcode
                FROM CustomerEntity
                WHERE id = :customerId
        ]]>
    </query>
</hibernate-mapping>