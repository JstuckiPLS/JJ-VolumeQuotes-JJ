<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="com.pls.core.domain.address.UserAddressBookEntity.Q_GET_NEXT_ADDR_NAME_CODE">
        <return-scalar column="num" type="java.math.BigDecimal"/>
        <![CDATA[
                SELECT NEXTVAL('USR_ADDR_BOOK_NAME_NUMB_SEQ') AS num
        ]]>
    </sql-query>
    <sql-query name="com.pls.core.domain.address.UserAddressBookEntity.Q_GET_NEXT_ADDRESS_CODE">
        <return-scalar column="num" type="java.math.BigDecimal"/>
        <![CDATA[
                SELECT NEXTVAL('USR_ADDR_BOOK_ADDR_CODE_SEQ') AS num
        ]]>
    </sql-query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_DELETE_ADDRESS_BOOK_ENTRY">
        <![CDATA[
                update UserAddressBookEntity set status='I', modification.modifiedBy =:personId, modification.modifiedDate = LOCALTIMESTAMP where id =:id
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_CHECK_ADDRESS_CODE_EXISTS">
        <![CDATA[
                select count(a) from UserAddressBookEntity a where upper(a.addressCode)=:code and a.orgId=:id and a.status='A'
         ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_FIND_BY_ID">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address
                left join fetch a.address.state
                join fetch a.address.country
                where a.id=:id
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_GET_CUSTOMER_ADDRESS_BOOK_FOR_USER">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address addr
                left join fetch a.phone
                left join fetch a.fax
                left join fetch addr.zipCode zip
                where a.orgId=:orgId and a.status = 'A' and (a.personId is null or a.personId = :personId)
                    and (:filterWarnings = 0 or coalesce(zip.warning, 'N') = 'N')
                    and a.type in (:types)
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_GET_ADDRESS_BOOK_FOR_FREIGHT_BILL">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address addr
                left join fetch a.phone
                left join fetch addr.zipCode zip
                where a.orgId=:orgId and a.status = 'A' and (a.personId is null or a.personId = :personId)
                    and a.type in ('F', 'B')
                    and upper(a.addressCode || ', ' || a.addressName || ', ' || addr.address1 || ', ' || zip.city || ', ' || zip.stateCode || ', ' || zip.zipCode)
                            like :filter
                order by a.addressCode, a.addressName
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_GET_BY_ZIP">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address addr
                left join fetch a.phone
                left join fetch a.fax
                left join fetch addr.zipCode zip
                where a.orgId = :orgId
                    and a.status = 'A'
                    and addr.country.id = :country
                    and addr.zip = :zip
                    and addr.city = :city
                    and (a.personId is null or a.personId = :personId)
                    and a.type in (:types)
                order by a.addressName
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_FIND_BY_NAME_AND_CODE">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address
                left join fetch a.address.state
                join fetch a.address.country
                where upper(a.addressName)=:addressName
                    and upper(a.addressCode)=:addressCode
                    and a.orgId = :orgId
                order by a.status
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_SEARCH_ADDRESSES">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address adr
                where adr.address1=:address1
                    and coalesce(adr.address2, ' ')=coalesce(:address2, ' ')
                    and adr.city=:city
                    and adr.zip=:zip
                    and adr.countryCode=:countryCode
                    and adr.stateCode=:stateCode
                    and a.orgId=:customerId
        ]]>
    </query>

    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_ADDRESSES_AUTOCOMPLETE">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address
                join fetch a.address.state
                join fetch a.address.country
                where a.orgId=:customerId
                and a.addressName like :query
        ]]>
    </query>

    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_GET_CUSTOMER_ADDRESS_BOOKS">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address
                join fetch a.address.state
                join fetch a.address.country
                where a.orgId=:customerId
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.Q_FIND_BY_ORG_AND_CODE">
        <![CDATA[
                from UserAddressBookEntity a
                join fetch a.address
                join fetch a.address.state
                join fetch a.address.country
                where a.orgId=:orgId AND a.addressCode=:addressCode AND a.status='A'
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.RESET_DEFAULT_ADDRESS_FOR_CUSTOMER">
        <![CDATA[
                update UserAddressBookEntity a set a.isDefault = 'N' where a.orgId=:orgId and a.isDefault != 'N' and a.isDefault = 'Y'
        ]]>
    </query>
    <query name="com.pls.core.domain.address.UserAddressBookEntity.GET_DEFAULT_FREIGHT_BILL_PAY_TO_ADDRESS">
        <![CDATA[
            from UserAddressBookEntity a
                join fetch a.address
                join fetch a.address.state
                join fetch a.address.country
                where a.orgId=:orgId AND a.status='A' and (a.type='F' or a.type='B') and a.isDefault='Y'
        ]]>
    </query>
</hibernate-mapping>