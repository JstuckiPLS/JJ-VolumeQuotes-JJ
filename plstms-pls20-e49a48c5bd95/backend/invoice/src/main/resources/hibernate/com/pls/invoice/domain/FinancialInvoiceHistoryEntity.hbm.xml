<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_NEXT_INVOICE_ID_SEQ">
        <return-scalar column="num" type="long"/>
        <![CDATA[
                SELECT NEXTVAL('flatbed.INVOICE_HISTORY_INV_ID_SEQ') AS num
        ]]>
    </sql-query>
    <sql-query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_NEXT_CBI_SEQ">
        <return-scalar column="num" type="java.lang.Long"/>
        <![CDATA[
                SELECT NEXTVAL('flatbed.CBI_INVOICE_NUMB_SEQ') AS num
        ]]>
    </sql-query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_LOAD_IDS">
        <![CDATA[
                select load.id
                from LoadEntity load
                join load.destination dest with date_trunc('day', dest.departure) <= cast (:filterDeliveryDate as date)
                where load.status = 'CD'
                    and load.billTo.id = :billToId
                    and coalesce(load.invoiceApproved, 'N') = 'Y'
                    and load.finalizationStatus = 'AB'
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_ADJUSTMENT_IDS">
        <![CDATA[
                select distinct adj.id
                from LoadEntity load
                join load.financialAccessorials adj with adj.financialStatus = 'ABAA' and adj.sentToFinance != 'Y' and coalesce(adj.invoiceApproved, 'N') = 'Y'
                join adj.costDetailItems adjItems
                where coalesce(adjItems.billTo.id, load.billTo.id) = :billToId
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.I_LOADS">
        <![CDATA[
                insert into FinancialInvoiceHistoryEntity (invoiceId, invoiceType, loadId, releaseStatus,
                    createdBy, createdDate, modifiedBy, modifiedDate)

                select :invoiceId,
                    invSet.invoiceType,
                    l.id,
                    :releaseStatus,
                    :userId,
                    LOCALTIMESTAMP,
                    :userId,
                    LOCALTIMESTAMP
                from LoadEntity l
                join l.billTo bt
                join bt.invoiceSettings invSet
                where l.id in (:loadsIds)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.I_ADJUSTMENTS">
        <![CDATA[
                insert into FinancialInvoiceHistoryEntity (invoiceId, invoiceType, adjustmentId, releaseStatus,
                    createdBy, createdDate, modifiedBy, modifiedDate)

                select :invoiceId,
                    coalesce(adjInvSet.invoiceType, loadInvSet.invoiceType),
                    adj.id,
                    :releaseStatus,
                    :userId,
                    LOCALTIMESTAMP,
                    :userId,
                    LOCALTIMESTAMP
                from LoadEntity load
                join load.allFinancialAccessorials adj with adj.id in (:adjustmentIds)
                join load.billTo lbt
                join lbt.invoiceSettings loadInvSet
                join adj.costDetailItems adjItems
                left outer join adjItems.billTo cbt
                join cbt.invoiceSettings adjInvSet
                where adjItems.id = (select max(id) from CostDetailItemEntity where financialAccessorials = adj)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.U_LOADS_INVOICE_NUMBERS">
        <![CDATA[
                update versioned LoadCostDetailsEntity
                    set invoiceNumber = 'T-' || load.id || '-0000',
                    groupInvoiceNumber = 'T-' || load.id || '-0000',
                    generalLedgerDate = :invoiceDate,
                    sentToFinance = 'Y',
                    modification.modifiedDate = LOCALTIMESTAMP,
                    modification.modifiedBy = :userId
                where status = 'A' and load.id in (:loadIds)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.U_ADJUSTMENTS_INVOICE_NUMBERS">
        <![CDATA[
                update versioned FinancialAccessorialsEntity
                    set invoiceNumber = 'T-' || load.id || '-AD' || trim(BOTH ' ' FROM to_char(coalesce(revision, 1), '09')),
                    groupInvoiceNumber = 'T-' || load.id || '-AD' || trim(BOTH ' ' FROM to_char(coalesce(revision, 1), '09')),
                    generalLedgerDate = :invoiceDate,
                    sentToFinance = 'Y',
                    financialStatus = :financialStatus,
                    modification.modifiedDate = LOCALTIMESTAMP,
                    modification.modifiedBy = :userId
                where status = 'A' and id in (:adjustmentIds)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_INVOICE_RESULTS">
        <![CDATA[
                select distinct
                    coalesce(adj.invoiceNumber, lCost.invoiceNumber) as invoiceNumber,
                    coalesce(adj.financialStatus, load.finalizationStatus) as finalizationStatus,
                    coalesce(adjLoad.id, load.id) as loadId,
                    adj.id as adjustmentId,
                    case when adj.shortPay is not null and adj.shortPay = 'Y' then true else false end as doNotInvoice,
                    coalesce(adj.bol, adjLoad.numbers.bolNumber, load.numbers.bolNumber) as bol,
                    case when reason.code = 'RB' or reason.code = 'RS' then TRUE else FALSE end as rebill,
                    error.description as errorMessage,
                    coalesce(adj.totalCost, lCost.totalCost) as cost,
                    coalesce(adj.totalRevenue, lCost.totalRevenue) as revenue,
                    coalesce(cdi.billTo.id, load.billToId) as billToId
                from FinancialInvoiceHistoryEntity hist
                left join hist.load load
                left join load.activeCostDetails lCost
                left join hist.adjustment adj
                left join adj.costDetailItems cdi
                left join cdi.reason reason
                left join adj.load adjLoad
                left join hist.errorMessage error
                where hist.invoiceId = :invoiceId
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_ALL_LOADS_ID">
        <![CDATA[
                select distinct
                    coalesce(hist.loadId, adj.load.id)
                from FinancialInvoiceHistoryEntity hist
                left join hist.load l
                left join hist.adjustment adj with adj.shortPay = 'N'
                left join adj.costDetailItems cdi
                where hist.invoiceId = :invoiceId
                    and coalesce(cdi.billTo.id, l.billToId) = :billToId
                    and (hist.releaseStatus = 'S' or hist.releaseStatus = 'R')
                    and (hist.loadId is not null or adj.load.id is not null)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GROUP_INVOICE_NUMBERS">
        <![CDATA[
                select distinct
                    coalesce(lCost.groupInvoiceNumber, adj.groupInvoiceNumber)
                from FinancialInvoiceHistoryEntity hist
                left join hist.load l
                left join l.activeCostDetails lCost
                left join hist.adjustment adj with adj.shortPay = 'N'
                left join adj.costDetailItems cdi
                where hist.invoiceId = :invoiceId
                    and coalesce(cdi.billTo.id, l.billToId) = :billToId
                    and (hist.releaseStatus = 'S' or hist.releaseStatus = 'R')
                    and (l.id is not null or adj.id is not null)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.I_CBI_LOADS_HIST">
        <![CDATA[
                insert into FinancialInvoiceHistoryEntity (invoiceId, invoiceType, loadId, releaseStatus,
                    createdBy, createdDate, modifiedBy, modifiedDate)

                select :invoiceId,
                    invSet.invoiceType,
                    l.id,
                    :releaseStatus,
                    :userId,
                    LOCALTIMESTAMP,
                    :userId,
                    LOCALTIMESTAMP
                from LoadEntity l
                join l.billTo bt
                join bt.invoiceSettings invSet
                where l.id in (:loadsIds)
                    and l.finalizationStatus = 'FP'
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.I_CBI_ADJUSTMENTS_HIST">
        <![CDATA[
                insert into FinancialInvoiceHistoryEntity (invoiceId, invoiceType, adjustmentId, releaseStatus,
                    createdBy, createdDate, modifiedBy, modifiedDate)

                select :invoiceId,
                    invSet.invoiceType,
                    adj.id,
                    :releaseStatus,
                    :userId,
                    LOCALTIMESTAMP,
                    :userId,
                    LOCALTIMESTAMP
                from FinancialAccessorialsEntity adj
                join adj.load l
                join l.billTo bt
                join bt.invoiceSettings invSet
                where adj.id in (:adjustmentsIds)
                    and adj.financialStatus = 'FP'
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_BILL_TO_BY_INVOICE_ID">
        <![CDATA[
                select billTo
                from BillToEntity billTo
                join fetch billTo.billingInvoiceNode
                join fetch billTo.invoiceSettings invSett
                join fetch invSett.processingTimeTimezone
                where billTo.id in (
                    select distinct
                        coalesce(l.billToId, adjL.billToId)
                    from FinancialInvoiceHistoryEntity hist
                    left join hist.load l
                    left join hist.adjustment adj
                    left join adj.load adjL
                    where hist.invoiceId = :invoiceId
                )
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.U_LOADS_INVOICED_IN_FIN">
        <![CDATA[
                update versioned LoadCostDetailsEntity set invoicedInFinance = 'Y',
                    sentToFinance = 'Y',
                    generalLedgerDate = :glDate,
                    modification.modifiedBy = :userId,
                    modification.modifiedDate = LOCALTIMESTAMP
                where status = 'A' and load.id in (:loadsIds)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.U_ADJ_INVOICED_IN_FIN">
        <![CDATA[
                update FinancialAccessorialsEntity set invoicedInFinance = 'Y',
                    sentToFinance = 'Y',
                    financialStatus = :finStatus,
                    generalLedgerDate = :glDate,
                    modification.modifiedBy = :userId,
                    modification.modifiedDate = LOCALTIMESTAMP
                where id in (:adjustmentsIds)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_LOADS_BY_INVOICE_ID">
        <![CDATA[
                select distinct load
                from FinancialInvoiceHistoryEntity hist
                join hist.load load
                join fetch load.origin
                join fetch load.destination dest
                join fetch load.carrier carrier
                join fetch load.organization customer
                join fetch load.billTo bt
                join fetch bt.billingInvoiceNode
                join fetch bt.invoiceSettings invSett
                join fetch load.activeCostDetails actCost
                join fetch actCost.costDetailItems
                left outer join fetch invSett.processingTimeTimezone
                left outer join fetch carrier.phone
                left outer join fetch carrier.fax
                left outer join fetch customer.phone
                left outer join fetch customer.fax
                left outer join fetch load.freightBillPayTo
                left outer join fetch load.specialMessage
                where
                    hist.invoiceId = :invoiceId
                    and hist.adjustmentId is null
                    and (hist.releaseStatus = 'S' or hist.releaseStatus = 'R')
                order by load.id
        ]]>
    </query>
    <sql-query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_INVOICE_HISTORY">
        <return-scalar column="invoiceTypeStr" type="string"/>
        <return-scalar column="invoiceId" type="long"/>
        <return-scalar column="invoiceDate" type="date"/>
        <return-scalar column="invoiceNumber" type="string"/>
        <return-scalar column="userName" type="string"/>
        <return-scalar column="loadId" type="long"/>
        <return-scalar column="adjustmentId" type="long"/>
        <return-scalar column="billToId" type="long"/>
        <return-scalar column="invoiceInFinancials" type="string"/>
        <return-scalar column="ediCapable" type="string"/>
        <return-scalar column="bol" type="string"/>
        <return-scalar column="pro" type="string"/>
        <return-scalar column="carrierName" type="string"/>
        <return-scalar column="invoiceAmount" type="java.math.BigDecimal"/>
        <return-scalar column="paidAmount" type="java.math.BigDecimal"/>
        <return-scalar column="networkName" type="string"/>
        <return-scalar column="customerName" type="string"/>
        <return-scalar column="dueDate" type="date"/>
        <return-scalar column="adjustment" type="string"/>
        <![CDATA[
                select distinct
                    INV_TYPE as invoiceTypeStr,
                    INVOICE_ID as invoiceId,
                    GL_DATE as invoiceDate,
                    GROUP_INV_NUM as invoiceNumber,
                    USR as userName,
                    case when (INV_TYPE = 'CBI' and :customerInvoiceNumber is null) then null else LOAD_ID end as loadId,
                    case when (INV_TYPE = 'CBI' and :customerInvoiceNumber is null) then null else FAA_DETAIL_ID end as adjustmentId,
                    BILL_TO_ID as billToId,
                    case when INV_TYPE_FLAG = 1 then 'TRUE' else 'FALSE' end as invoiceInFinancials,
                    EDI_INVOICE as ediCapable,
                    case when (INV_TYPE = 'CBI' and :customerInvoiceNumber is null) then null else BOL end as bol,
                    case when (INV_TYPE = 'CBI' and :customerInvoiceNumber is null) then null else CARRIER_REFERENCE_NUMBER end as pro,
                    CARRIER_NAME as carrierName,
                    SUBTOTAL as invoiceAmount,
                    AMT_APPLIED as paidAmount,
                    NETW_NAME as networkName,
                    CUSTOMER as customerName,
                    DUE_DATE as dueDate,
                    case when (IS_ADJ_AVAILABLE = 'Y' and  IS_ADJ_AVAILABLE is not null) then 'TRUE' else 'FALSE' end as adjustment
                from pls_inv_history_view hist
                left join ORGANIZATION_USERS cu on cu.PERSON_ID = :userId and cu.ORG_TYPE = 'SHIPPER' and cu.STATUS = 'A'
                                                and cu.ORG_ID = hist.ORG_ID and cu.LOCATION_ID = hist.LOCATION_ID
                left join NETWORK_USERS nu on nu.PERSON_ID = :userId and nu.STATUS = 'A' and nu.NETWORK_ID = hist.NETWORK_ID
                where
                    (:invoiceNumber is null or hist.GROUP_INV_NUM = :invoiceNumber)
                    and (:customerInvoiceNumber is null or hist.CUST_INV_NUM = :customerInvoiceNumber)
                    and (:customerId is null or hist.ORG_ID = :customerId)
                    and (:bolNumber is null or hist.BOL like :bolNumber)
                    and (:proNumber is null or hist.CARRIER_REFERENCE_NUMBER like :proNumber)
                    and (:loadId is null or hist.LOAD_ID = :loadId)
                    and (cast(:dateFrom as timestamp) is null or GL_DATE between cast(:dateFrom as timestamp) and cast(:dateTo as timestamp))
                    and (cu.PERSON_ID is not null or nu.PERSON_ID is not null)
        ]]>
    </sql-query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_INVOICE_HISTORY_CBI_DETAILS_LOADS">
        <![CDATA[
                select
                    load.id as loadId,
                    load.numbers.bolNumber as bol,
                    load.numbers.proNumber as pro,
                    loadOriginAddress.city as originCity,
                    loadOriginAddress.stateCode as originState,
                    loadOriginAddress.zip as originZip,
                    loadDestinationAddress.city as destinationCity,
                    loadDestinationAddress.stateCode as destinationState,
                    loadDestinationAddress.zip as destinationZip,
                    loadCarrier.name as carrierName,
                    cd.totalRevenue as totalRevenue,
                    cd.invoiceNumber as invoiceNumber,
                    lar.amountApplied as paidAmount,
                    load.numbers.poNumber as po,
                    load.numbers.glNumber as glNumber,
                    coalesce(accDetail.billTo.id, load.billToId) as billToId,
                    cd.totalCost as totalCost,
                    coalesce(fsDetail.subtotal, 0) as fs,
                    cd.totalRevenue - coalesce(accDetail.subtotal, 0) - coalesce(fsDetail.subtotal, 0) as acc,
                    fa.shortPay as doNotInvoice,
                    fa.id as adjustmentId
                from FinancialInvoiceHistoryEntity hist
                left join hist.adjustment fa
                join hist.load load
                join load.activeCostDetails cd with ((:groupInvoiceNumber is null and cd.groupInvoiceNumber is null) or cd.groupInvoiceNumber = :groupInvoiceNumber)
                join cd.modification.modifiedUser cdUser
                join load.carrier loadCarrier
                join load.origin loadOrigin
                join load.destination loadDestination
                join loadOrigin.address loadOriginAddress
                join loadDestination.address loadDestinationAddress
                left join cd.costDetailItems accDetail with accDetail.owner = 'S' and accDetail.accessorialType = 'SRA'
                left join cd.costDetailItems fsDetail with fsDetail.owner = 'S' and fsDetail.accessorialType = 'FS'
                left outer join load.accountReceivables lar with lar.financialAccessorials.id is null
                where hist.invoiceId = :invoiceId
                    and hist.releaseStatus = 'S'
                    and hist.adjustmentId is null
                    and loadDestination.scheduledArrival is not null
                    and loadDestination.departure is not null
                    and loadOrigin.scheduledArrival is not null
                    and loadOrigin.departure is not null
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_AR_BY_INVOICE_NUMBERS_ADJ">
        <![CDATA[
                select fa.invoiceNumber as invoiceNumber,
                    load.id as loadId,
                    fa.id as adjId,
                    cdiReason.code as adjType,
                    cdi.subtotal as price,
                    cdi.quantity as quantity,
                    cdi.unitCost as unitCost,
                    cdi.unitType as unitType,
                    cdi.note as note,
                    (case when cdi.accessorialType = 'CRA' or cdi.accessorialType = 'SRA' then 'LH' else cdi.accessorialType end) as itemId,
                    coalesce(cbt.name, lbt.name) as billToName,
                    coalesce(cbt.id, lbt.id) as billToId,
                    coalesce(cbt.currency, lbt.currency) as currency,
                    customer.networkId as networkId,
                    customer.id as customerOrgId,
                    customer.companyCode as customerCode,
                    coalesce(cbtBin.customerNumber, lbtBin.customerNumber) as customerNumber,
                    coalesce(cbtBin.customerId, lbtBin.customerId) as customerId,
                    lfh.creationDate as creationDate,
                    load.pieces as pieces,
                    load.mileage as mileage,
                    load.numbers.bolNumber as bol,
                    load.numbers.glNumber as glNumber,
                    load.numbers.proNumber as pro,
                    load.numbers.poNumber as po,
                    load.numbers.refNumber as ref,
                    load.numbers.soNumber as soNumber,
                    load.paymentTerms as paymentTerms,
                    load.shipmentDirection as shipmentDirection,
                    load.commodity as commodity,
                    load.numbers.trailerNumber as trailer,
                    load.vendorBillDetails.frtBillRecvDate as frtBillRecvDate,
                    load.container as eqType,
                    load.sourceInd as sourceInd,
                    load.modification.createdBy as loadCreatedByUserId,
                    load.modification.createdDate as loadCreatedDate,
                    fa.marginAmt as margin,
                    location.id as locationId,
                    location.locationName as locationName,
                    loadOrig.departure as departure,
                    loadDest.departure as arrivalDate,
                    coalesce(cdiCarrier.name, loadCarrier.name) as carrierName,
                    coalesce(cdiCarrier.scac, loadCarrier.scac) as scac,
                    loadDestAddr.address1 as destAddress1,
                    loadDestAddr.address2 as destAddress2,
                    loadDestAddr.city as destCity,
                    loadDestAddr.zip as destZip,
                    loadDestAddr.stateCode as destStateCode,
                    loadDestAddr.countryCode as destCountryCode,
                    loadDest.addressCode as destAddressCode,
                    loadDest.contact as destContact,
                    loadOrigAddr.address1 as origAddress1,
                    loadOrigAddr.address2 as origAddress2,
                    loadOrigAddr.city as origCity,
                    loadOrigAddr.zip as origZip,
                    loadOrigAddr.stateCode as origStateCode,
                    loadOrigAddr.countryCode as origCountryCode,
                    loadOrig.addressCode as origAddressCode,
                    loadOrig.contact as origContact,
                    fa.modification.createdDate as adjCreatedDate,
                    fa.generalLedgerDate as glDate,
                    fa.adjustmentAccessorial as adjustmentAccessorial,
                    fa.revision as revision,
                    cdi.owner as owner,
                    coalesce(cdiCarrier.currencyCode, loadCarrier.currencyCode) as carrierCC,
                    fa.shortPay as doNotInvoice,
                    fa.shortPay as shortPay,
                    coalesce(loadDest.departure, loadDest.earlyScheduledArrival) as destAvailableDeliveryDate,
                    coalesce(loadOrig.departure, loadOrig.earlyScheduledArrival) as origAvailableDeliveryDate,
                    load.weight as weight,
                    fa.totalCost as totalCost,
                    (loadDest.seqInRoute -1) as seqInRoute,
                    loadOrig.departure as originDeparture,
                    fbu.unitCode as unitCode,
                    fcc.costCenterCode as costCenterCode,
                    (case when load.hazmat=true then 'Y' else 'N' end) as hazmat,
                    ctt.description as ctDescription,
                    fr.id as requestId,
                    fb.billerType as billerType,
                    custNetwork.defaultApTerms as defaultApTerms,
                    custNetwork.maxApDuedays as maxApDuedays,
                    (select apt.dueDays from OrgCarrierEntity car, ApTermsEntity apt, NetworkEntity nw where apt.id = car.termId
                    and car.orgId = coalesce(cdiCarrier.id,loadCarrier.id) and nw.id = custNetwork.id
                    and car.networkId = (case when (select count(*) from OrgCarrierEntity cr where cr.networkId = custNetwork.id and cr.orgId = coalesce(cdiCarrier.id,loadCarrier.id)) > 0
                    then   custNetwork.id
                    else nw.shareCarrierNetworkId
                    end) )as apDueDays,
                    (select apt.name from OrgCarrierEntity car, ApTermsEntity apt, NetworkEntity nw where apt.id = car.termId
                    and car.orgId = coalesce(cdiCarrier.id,loadCarrier.id) and nw.id = custNetwork.id
                    and car.networkId = (case when (select count(*) from OrgCarrierEntity cr where cr.networkId = custNetwork.id and cr.orgId = coalesce(cdiCarrier.id,loadCarrier.id)) > 0
                    then   custNetwork.id
                    else nw.shareCarrierNetworkId
                    end) )as apTerms
                from LoadFinalizationHistoryEntity lfh, FinanRequestsEntity fr, FinanBillersEntity fb,
                ContainerTypesEntity ctt, FinanBusnUnitEntity fbu, FinanCostCenterEntity fcc,
                FinancialInvoiceHistoryEntity hist
                join hist.adjustment fa
                join fa.costDetailItems cdi
                join fa.load load
                join load.location location
                join load.organization customer
                left join cdi.reason cdiReason
                join load.billTo lbt
                left outer join cdi.billTo cbt
                left join cbt.billingInvoiceNode cbtBin
                join lbt.billingInvoiceNode lbtBin
                join load.destination loadDest
                join loadDest.address loadDestAddr
                join load.origin loadOrig
                join loadOrig.address loadOrigAddr
                join load.carrier loadCarrier
                left join cdi.carrier cdiCarrier
                join customer.network custNetwork
                where 1 = 1
                    AND hist.invoiceId = :invoiceId
                    AND fa.financialStatus = 'FP'
                    AND cdi.subtotal <> 0.0
                    AND lfh.loadId = load.id and lfh.finalizationStatus = 'FP'
                    AND lfh.faaDetailId = fa.id
                    AND fr.id = lfh.requestId
                    AND fb.personId in ( case when exists (select 'X' from FinanBillersEntity where personId = fr.personId) then fr.personId else -1 end)
                    AND (load.container = ctt.containerCD)
                    AND (fbu.networkId = customer.networkId AND fbu.orgId =
                        (case when(select count(*) from FinanBusnUnitEntity ifbu where ifbu.orgId = customer.id) > 0 then customer.id  else -1 end))
                    AND fcc.companyCode = (case when(select count(*) from FinanCostCenterEntity ifcc
                    where ifcc.companyCode = customer.companyCode) > 0 then customer.companyCode
                    else '00'
                    end)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_AR_BY_INVOICE_NUMBERS">
        <![CDATA[
                select cd.invoiceNumber as invoiceNumber,
                    load.id as loadId,
                    cdiReason.code as adjType,
                    cdi.subtotal as price,
                    cdi.quantity as quantity,
                    cdi.unitCost as unitCost,
                    cdi.unitType as unitType,
                    (case when cdi.accessorialType = 'CRA' or cdi.accessorialType = 'SRA' then 'LH' else cdi.accessorialType end) as itemId,
                    coalesce(cbt.name, lbt.name) as billToName,
                    coalesce(cbt.id, lbt.id) as billToId,
                    coalesce(cbt.currency, lbt.currency) as currency,
                    customer.networkId as networkId,
                    customer.companyCode as customerCode,
                    customer.id as customerOrgId,
                    coalesce(cbtBin.customerNumber, lbtBin.customerNumber) as customerNumber,
                    coalesce(cbtBin.customerId, lbtBin.customerId) as customerId,
                    lfh.creationDate as creationDate,
                    load.pieces as pieces,
                    load.mileage as mileage,
                    load.numbers.bolNumber as bol,
                    load.numbers.glNumber as glNumber,
                    load.numbers.proNumber as pro,
                    load.numbers.poNumber as po,
                    load.numbers.refNumber as ref,
                    load.numbers.soNumber as soNumber,
                    load.paymentTerms as paymentTerms,
                    load.shipmentDirection as shipmentDirection,
                    load.commodity as commodity,
                    load.numbers.trailerNumber as trailer,
                    load.vendorBillDetails.frtBillRecvDate as frtBillRecvDate,
                    load.container as eqType,
                    load.sourceInd as sourceInd,
                    load.modification.createdBy as loadCreatedByUserId,
                    load.modification.createdDate as loadCreatedDate,
                    cd.marginAmt as margin,
                    loadOrig.departure as departure,
                    loadDest.departure as arrivalDate,
                    loadCarrier.name as carrierName,
                    loadCarrier.scac as scac,
                    location.id as locationId,
                    location.locationName as locationName,
                    loadDestAddr.address1 as destAddress1,
                    loadDestAddr.address2 as destAddress2,
                    loadDestAddr.city as destCity,
                    loadDestAddr.zip as destZip,
                    loadDestAddr.stateCode as destStateCode,
                    loadDestAddr.countryCode as destCountryCode,
                    loadDest.addressCode as destAddressCode,
                    loadDest.contact as destContact,
                    loadOrigAddr.address1 as origAddress1,
                    loadOrigAddr.address2 as origAddress2,
                    loadOrigAddr.city as origCity,
                    loadOrigAddr.zip as origZip,
                    loadOrigAddr.stateCode as origStateCode,
                    loadOrigAddr.countryCode as origCountryCode,
                    loadOrig.addressCode as origAddressCode,
                    loadOrig.contact as origContact,
                    cd.generalLedgerDate as glDate,
                    cdi.owner as owner,
                    cdi.note as note,
                    loadCarrier.currencyCode as carrierCC,
                    coalesce(loadDest.departure, loadDest.earlyScheduledArrival) as destAvailableDeliveryDate,
                    coalesce(loadOrig.departure, loadOrig.earlyScheduledArrival) as origAvailableDeliveryDate,
                    load.weight as weight,
                    cd.totalCost as totalCost,
                    (loadDest.seqInRoute -1) as seqInRoute,
                    loadOrig.departure as originDeparture,
                    fbu.unitCode as unitCode,
                    fcc.costCenterCode as costCenterCode,
                    (case when load.hazmat=true then 'Y' else 'N' end) as hazmat,
                    ctt.description as ctDescription,
                    fr.id as requestId,
                    fb.billerType as billerType,
                    custNetwork.defaultApTerms as defaultApTerms,
                    custNetwork.maxApDuedays as maxApDuedays,
                    (select apt.dueDays from OrgCarrierEntity car, ApTermsEntity apt, NetworkEntity nw where apt.id = car.termId
                    and car.orgId = loadCarrier.id and nw.id = custNetwork.id
                    and car.networkId = (case when (select count(*) from OrgCarrierEntity cr where cr.networkId = custNetwork.id and cr.orgId = loadCarrier.id) > 0
                    then   custNetwork.id
                    else nw.shareCarrierNetworkId
                    end) )as apDueDays,
                    (select apt.name from OrgCarrierEntity car, ApTermsEntity apt, NetworkEntity nw where apt.id = car.termId
                    and car.orgId = loadCarrier.id and nw.id = custNetwork.id
                    and car.networkId = (case when (select count(*) from OrgCarrierEntity cr where cr.networkId = custNetwork.id and cr.orgId = loadCarrier.id) > 0
                    then   custNetwork.id
                    else nw.shareCarrierNetworkId
                    end) )as apTerms
                from LoadFinalizationHistoryEntity lfh, FinanRequestsEntity fr, FinanBillersEntity fb,
                ContainerTypesEntity ctt, FinanBusnUnitEntity fbu, FinanCostCenterEntity fcc,
                FinancialInvoiceHistoryEntity hist
                join hist.load load
                join load.activeCostDetails cd
                join cd.costDetailItems cdi
                left join cdi.reason cdiReason
                join load.location location
                join load.organization customer
                join load.billTo lbt
                left outer join cdi.billTo cbt
                left join cbt.billingInvoiceNode cbtBin
                join lbt.billingInvoiceNode lbtBin
                join load.destination loadDest
                join loadDest.address loadDestAddr
                join load.origin loadOrig
                join loadOrig.address loadOrigAddr
                join load.carrier loadCarrier
                join customer.network custNetwork
                where 1=1
                    AND hist.invoiceId = :invoiceId
                    and hist.adjustmentId is null
                    AND (cdi.financialAccessorials is null) AND load.finalizationStatus = 'FP' and cdi.subtotal <> 0
                    AND lfh.loadId = load.id and lfh.finalizationStatus = 'FP' and lfh.faaDetailId is null
                    AND fr.id = lfh.requestId
                    AND fb.personId in ( case when exists (select 'X' from FinanBillersEntity where personId = fr.personId) then fr.personId else -1 end)
                    AND (load.container = ctt.containerCD)
                    AND (fbu.networkId = customer.networkId AND fbu.orgId =
                        (case when(select count(*) from FinanBusnUnitEntity ifbu where ifbu.orgId = customer.id) > 0 then customer.id  else -1 end))
                    AND fcc.companyCode = (case when(select count(*) from FinanCostCenterEntity ifcc
                    where ifcc.companyCode = customer.companyCode) > 0 then customer.companyCode
                    else '00'
                    end)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_ADJUSTMENTS_BY_INVOICE_ID">
        <![CDATA[
                select distinct adj
                from FinancialInvoiceHistoryEntity hist
                join hist.adjustment adj
                join fetch adj.load load
                where
                    hist.invoiceId = :invoiceId
                    and (hist.releaseStatus = 'S' or hist.releaseStatus = 'R')
                    and adj.shortPay = 'N'
                order by
                    load.id, adj.id
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_INVOICE_HISTORY_CBI_DETAILS_ADJ">
        <![CDATA[
                select
                    adj.id as loadId,
                    fa.id as adjustmentId,
                    adj.numbers.bolNumber as pro,
                    adj.numbers.proNumber as pro,
                    adjOriginAddress.city as originCity,
                    adjOriginAddress.stateCode as originState,
                    adjOriginAddress.zip as originZip,
                    adjDestinationAddress.city as destinationCity,
                    adjDestinationAddress.stateCode as destinationState,
                    adjDestinationAddress.zip as destinationZip,
                    adjCarrier.name as carrierName,
                    fa.totalRevenue as totalRevenue,
                    fa.invoiceNumber as invoiceNumber,
                    far.amountApplied as paidAmount,
                    adj.numbers.poNumber as po,
                    adj.numbers.glNumber as glNumber,
                    coalesce(accDetail.billTo.id, adj.billToId) as billToId,
                    fa.totalCost as totalCost,
                    coalesce(fsDetail.subtotal, 0) as fs,
                    fa.totalRevenue - coalesce(accDetail.subtotal, 0) - coalesce(fsDetail.subtotal, 0) as acc,
                    fa.shortPay as doNotInvoice
                from FinancialInvoiceHistoryEntity hist
                join hist.adjustment fa with ((:groupInvoiceNumber is null and fa.groupInvoiceNumber is null) or fa.groupInvoiceNumber = :groupInvoiceNumber)
                join fa.load adj
                join fa.modification.modifiedUser adjUser
                join adj.carrier adjCarrier
                join adj.origin adjOrigin
                join adj.destination adjDestination
                join adjOrigin.address adjOriginAddress
                join adjDestination.address adjDestinationAddress
                left join fa.costDetailItems accDetail with accDetail.owner = 'S' and accDetail.accessorialType = 'SRA'
                left join fa.costDetailItems fsDetail with fsDetail.owner = 'S' and fsDetail.accessorialType = 'FS'
                left outer join fa.accountReceivables far
                where hist.invoiceId = :invoiceId
                    and hist.releaseStatus = 'S'
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_LOADS_FOR_PROCESSING">
        <![CDATA[
                select load.id as loadId,
                    cd.id as costDetailId,
                    load.billToId as billToId,
                    load.numbers.bolNumber as bolNumber,
                    load.numbers.glNumber as glNumber,
                    load.numbers.poNumber as poNumber,
                    orig.departure as pickupDate,
                    dest.departure as deliveryDate,
                    load.vendorBillDetails.frtBillRecvDate as freightBillDate,
                    invSet.invoiceType as invoiceType,
                    invSet.cbiInvoiceType as cbiInvoiceType,
                    invSet.sortType as sortType,
                    bt.currency as billToCurrency,
                    car.currencyCode as carrierCurrency,
                    cd.totalRevenue as totalRevenue,
                    (select cast(sum(cdi.subtotal) as big_decimal) from cd.costDetailItems cdi where cdi.owner = 'S' and cdi.accessorialType <> 'SBR') as totalItemsRevenue,
                    cd.totalCost as totalCost,
                    (select cast(sum(cdi.subtotal) as big_decimal) from cd.costDetailItems cdi where cdi.owner = 'C') as totalItemsCost
                from LoadEntity load
                join load.origin orig
                join load.destination dest
                join load.billTo bt
                join bt.invoiceSettings invSet
                join load.carrier car
                join load.activeCostDetails cd
                where load.id in (:ids)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_GET_ADJ_FOR_PROCESSING">
        <![CDATA[
                select load.id as loadId,
                    adj.id as adjustmentId,
                    cd.id as costDetailId,
                    load.billToId as billToId,
                    load.numbers.bolNumber as bolNumber,
                    load.numbers.glNumber as glNumber,
                    dest.departure as deliveryDate,
                    invSet.invoiceType as invoiceType,
                    invSet.cbiInvoiceType as cbiInvoiceType,
                    invSet.sortType as sortType,
                    bt.currency as billToCurrency,
                    car.currencyCode as carrierCurrency,
                    adj.totalRevenue as totalRevenue,
                    (select cast(sum(cdi.subtotal) as big_decimal) from adj.costDetailItems cdi where cdi.owner = 'S' and cdi.accessorialType <> 'SBR') as totalItemsRevenue,
                    adj.totalCost as totalCost,
                    (select cast(sum(cdi.subtotal) as big_decimal) from adj.costDetailItems cdi where cdi.owner = 'C') as totalItemsCost,
                    (select sum(case when cdi.subtotal <> round(cast(cdi.unitCost * cdi.quantity as big_decimal), 2) then 1 else 0 end) from adj.costDetailItems cdi) as invalidCostItemsCount,
                    adj.shortPay as doNotInvoice,
                    case when (select max(cdi.reason.code) from adj.costDetailItems cdi) = 'RS' then TRUE else FALSE end as rebill
                from LoadEntity load
                join load.financialAccessorials adj with adj.id in (:ids)
                join load.activeCostDetails cd
                join load.destination dest
                join adj.costDetailItems cdi
                join cdi.billTo bt
                join bt.invoiceSettings invSet
                join cdi.carrier car
                where cdi.id = (select max(id) from CostDetailItemEntity where financialAccessorials = adj)
        ]]>
    </query>
    <query name="com.pls.invoice.domain.FinancialInvoiceHistoryEntity.Q_ADJ_REASONS">
        <![CDATA[
                select distinct load.id as key,
                    reason.description as value
                from LoadEntity load
                join load.financialAccessorials adj with adj.id in (:ids)
                join adj.costDetailItems cdi
                join cdi.reason reason
        ]]>
    </query>
</hibernate-mapping>