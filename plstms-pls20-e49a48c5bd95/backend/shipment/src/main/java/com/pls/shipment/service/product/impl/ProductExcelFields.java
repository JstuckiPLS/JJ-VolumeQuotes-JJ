package com.pls.shipment.service.product.impl;import org.apache.commons.lang3.StringUtils;import com.pls.shipment.domain.LtlProductEntity;import com.pls.shipment.domain.LtlProductHazmatInfo;/** * Represents fields of {@link LtlProductEntity} entity. Also holds column header information for Excel file. *  * @author Maxim Medvedev */public enum ProductExcelFields {    /**     * Data for {@link LtlProductEntity#getCommodityClass()} field.     */    COMMODITY_CLASS("Class", true),    /**     * Data for {@link LtlProductEntity#getDescription()} field.     */    DESCRIPTION("Product", true),    /**     * Data for {@link LtlProductHazmatInfo#getEmergencyCompany()} field.     */    HAZMAT_COMPANY("Company", false),    /**     * Data for {@link LtlProductHazmatInfo#getEmergencyContract()} field.     */    HAZMAT_CONTRACT("Contract #", false),    /**     * Data for {@link LtlProductEntity#isHazmat()} field.     */    HAZMAT_FLAG("Hazmat (yes or no)", true),    /**     * Data for {@link LtlProductHazmatInfo#getPackingGroup()} field.     */    HAZMAT_PACKING_CODE("Packing Code", false),    /**     * Data for {@link LtlProductHazmatInfo#getEmergencyPhone()} field.     */    HAZMAT_PHONE("Phone", false),    /**     * Data for {@link LtlProductHazmatInfo#getUnNumber()} field.     */    HAZMAT_UN("UN#", false),    /**     * Data for {@link LtlProductEntity#getNmfcNum()} field.     */    NMFC_NUM("NMFC #", false),    /**     * Data for {@link LtlProductEntity#getNmfcSubNum()} field.     */    NMFC_SUB_NUM("Sub Class", false),    /**     * Data for {@link LtlProductEntity#getProductCode()} field.     */    SKU("SKU/Code", false);    /**     * Get appropriated {@link ProductExcelFields} using column header text.     *      * @param header     *            Header string.     *      * @return {@link ProductExcelFields} if this column was recognized. Otherwise returns <code>null</code>.     */    public static ProductExcelFields getFromHeaderText(String header) {        ProductExcelFields result = null;        String normalizedHeader = StringUtils.trimToNull(header);        for (ProductExcelFields field : ProductExcelFields.values()) {            if (StringUtils.equalsIgnoreCase(field.getHeader(), normalizedHeader)) {                result = field;                break;            }        }        return result;    }    private String header;    private boolean required;    ProductExcelFields(String header, boolean required) {        this.header = StringUtils.trimToEmpty(header);        this.required = required;    }    /**     * Get header value.     *      * @return the header.     */    public String getHeader() {        return header;    }    /**     * Get required value.     *      * @return the required.     */    public boolean isRequired() {        return required;    }}