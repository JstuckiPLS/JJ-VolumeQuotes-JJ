package com.pls.shipment.service.product.impl;import java.util.HashMap;import java.util.Map;import java.util.Set;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.CellType;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.util.CellReference;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.pls.core.exception.fileimport.ImportFileInvalidDataException;/** * Class to parse and validate header row. *  * @author Maxim Medvedev */public class HeaderData {    private final Map<ProductExcelFields, Integer> headerData = new HashMap<ProductExcelFields, Integer>();    private final Logger log = LoggerFactory.getLogger(getClass());    /**     * Get header entry set.     *      * @return header entry set     */    public Set<Map.Entry<ProductExcelFields, Integer>> entrySet() {        return headerData.entrySet();    }    /**     * Check that current sheet has least one data column.     *      * @return <code>true</code> if least one data column was found. Otherwise returns false and this sheet     *         should be skipped.     */    public boolean hasData() {        return !headerData.isEmpty();    }    public Map<ProductExcelFields, Integer> getHeaderData() {        return this.headerData;    }    /**     * Read header data.     *      * @param headerRow     *            The first row that will be used to read header data for current sheet.     *      * @throws com.pls.core.exception.fileimport.ImportFileInvalidDataException     *             when invalid header data is found.     */    public void readData(Row headerRow) throws ImportFileInvalidDataException {        log.debug("Parsing header data");        headerData.clear();        if (headerRow != null) {            readHeaderData(headerRow);            validateHeaderData(headerRow.getSheet().getSheetName());        }    }    @SuppressWarnings("deprecation")    private void readHeaderData(Row headerRow) {        for (Cell collumn : headerRow) {            if (CellType.STRING == collumn.getCellTypeEnum()) {                ProductExcelFields field = ProductExcelFields.getFromHeaderText(collumn.getStringCellValue());                if (field != null) {                    headerData.put(field, collumn.getColumnIndex());                }            } else {                log.warn("Cell ''{}'' was skipped due to invalid type. Only string values are valid for header row.",                        new CellReference(collumn).formatAsString());            }        }    }    private void validateHeaderData(String sheetName) throws ImportFileInvalidDataException {        for (ProductExcelFields field : ProductExcelFields.values()) {            if (field.isRequired() && (!headerData.containsKey(field))) {                throw new ImportFileInvalidDataException(String.format("Column ''%s'' was not found on ''%s'' sheet.",                        field.getHeader(), sheetName));            }        }    }}