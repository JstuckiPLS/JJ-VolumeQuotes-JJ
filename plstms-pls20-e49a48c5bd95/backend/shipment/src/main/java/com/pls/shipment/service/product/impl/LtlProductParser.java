package com.pls.shipment.service.product.impl;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import com.pls.core.exception.fileimport.ImportFileInvalidDataException;import com.pls.core.exception.fileimport.ImportFileParseException;import org.apache.poi.openxml4j.exceptions.InvalidFormatException;import org.apache.poi.openxml4j.exceptions.OpenXML4JException;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.ss.usermodel.WorkbookFactory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.pls.shipment.domain.LtlProductEntity;/** * Contain logic to extract {@link LtlProductEntity}s from MS Excel of CSV files.<br /> * <b>Warning:</b> this class is not thread safe. *  * @author Maxim Medvedev */public class LtlProductParser {    private final DataParser dataParser = new DataParser();    private final Logger log = LoggerFactory.getLogger(getClass());    /**     * Parse specified file and extract {@link LtlProductEntity} data.     *      * @param productData     *            MS Excel.     * @return Not <code>null</code> {@link List}.     *      * @throws com.pls.core.exception.fileimport.ImportFileParseException     *             when some unexpected exception during parsing happened.     * @throws com.pls.core.exception.fileimport.ImportFileInvalidDataException     *             when imported file contains some data on invalid format or required data is absent.     */    public List<LtlProductEntity> parse(InputStream productData) throws ImportFileParseException, ImportFileInvalidDataException {        checkInputStream(productData);        List<LtlProductEntity> result = new ArrayList<LtlProductEntity>();        try {            try {                Workbook workbook = WorkbookFactory.create(productData);                for (int sheetIndex = 0; sheetIndex < workbook.getNumberOfSheets(); sheetIndex++) {                    Sheet currentSheet = workbook.getSheetAt(sheetIndex);                    log.debug("Processing '{}' sheet...", currentSheet.getSheetName());                    Iterator<Row> rowsIt = currentSheet.iterator();                    initHeaderData(rowsIt);                    if (dataParser.getHeaderData().hasData()) {                        result.addAll(readData(rowsIt));                    } else {                        log.warn("Empty '{}' sheet was skipped", currentSheet.getSheetName());                    }                }            } finally {                productData.close();            }        } catch (IOException e) {            throw new ImportFileParseException("Unable to read stream due to internal error: " + e.getMessage(), e);        } catch (OpenXML4JException e) {            throw new ImportFileInvalidDataException("Invalid data format", e);        }        return result;    }    private void checkInputStream(InputStream productData) {        if (productData == null) {            throw new IllegalArgumentException("Input data is required");        }    }    private void initHeaderData(Iterator<Row> rowsIt) throws ImportFileInvalidDataException {        Row headerRow = null;        if (rowsIt.hasNext()) {            headerRow = rowsIt.next();        }        dataParser.getHeaderData().readData(headerRow);    }    private List<LtlProductEntity> readData(Iterator<Row> rowsIt) throws ImportFileParseException,            ImportFileInvalidDataException, InvalidFormatException {        List<LtlProductEntity> result = new ArrayList<LtlProductEntity>();        while (rowsIt.hasNext()) {            dataParser.parseRow(result, rowsIt.next());//            LtlProductEntity entity = dataParser.buildEntityFromRow(rowsIt.next());//            result.add(entity);        }        return result;    }}