<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <query name="com.pls.shipment.domain.ShipmentAlertEntity.Q_BY_SHIPMENT_IDS">
        <![CDATA[
                from ShipmentAlertEntity where load.id in (:shipmentIds)
        ]]>
    </query>
    <query name="com.pls.shipment.domain.ShipmentAlertEntity.Q_BY_STATUSES">
        <![CDATA[
                from ShipmentAlertEntity where status in (:statuses)
        ]]>
    </query>
    <query name="com.pls.shipment.domain.ShipmentAlertEntity.Q_DELETE">
        <![CDATA[
                delete from ShipmentAlertEntity where loadId = :loadId and type in (:types)
        ]]>
    </query>
    <query name="com.pls.shipment.domain.ShipmentAlertEntity.Q_COUNT_FOR_USER_BY_STATUSES">
        <![CDATA[
                select count(distinct sa.id)
                from ShipmentAlertEntity sa
                join sa.load l on l.finalizationStatus <> 'FH'
                join sa.customer customer
                left join l.customerLocationUsers cu with cu.status = 'A' and cu.personId = :personId
                left join customer.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :personId
                where sa.status = 'A'
                    and (l.status not in (:loadStatuses) or (l.status = 'CD' and sa.type = 'DWP'))
                    and (cu.personId is not null or nu.id is not null)
        ]]>
    </query>
    <query name="com.pls.shipment.domain.ShipmentAlertEntity.Q_FOR_USER_BY_STATUSES">
        <![CDATA[
                select
                    l.id,
                    l.numbers.bolNumber,
                    customer.name,
                    car.name,
                    coalesce(origin.departure, origin.earlyScheduledArrival),
                    origin.arrivalWindowStart,
                    origin.arrivalWindowEnd,
                    stz.code,
                    sa.type,
                    sa.status,
                    origin.contact as shipperAddressName,
                    destination.contact as consigneeAddressName,
                    destination.scheduledArrival,
                    l.modification.createdDate,
                    cru.login,
                    originAddr.city,
                    originAddr.stateCode,
                    originAddr.zip,
                    destAddr.city,
                    destAddr.stateCode,
                    destAddr.zip,
                    coalesce(orgService.pickup, 'EDI'),
                    TRIM(both ', ' from
                            (case when l.hazmat = true then 'H, ' else '' end) ||
                            (case when exists (from l.activeCostDetails acd where acd.guaranteedBy is not null) then 'GD, ' else '' end) ||
                            (case when exists (from l.documents doc where doc.documentType = 'FREIGHT_PICTURE' and doc.status = 'A') then 'FP, ' else '' end) ||
                            (case when exists (from l.documents doc where doc.documentType = 'CERTIFICATE_OF_INS' and doc.status = 'A') then 'CF, ' else '' end)
                        ) as indicators,
                    dispInf.modification.createdDate as dispatchedDate,
                    n.name as network,
                    aeU.firstName || ' ' || aeU.lastName as accountExecutive,
                    l.pieces as pieces,
                    l.weight as weight,
                    l.status as shipmentStatus,
                    l.numbers.proNumber
                from ShipmentAlertEntity sa
                join sa.load l on l.finalizationStatus <> 'FH'
                join sa.customer customer
                join l.carrier car
                join sa.origin origin
                join sa.destination destination
                left outer join origin.earlyScheduledArrivalTimeZone stz
                left outer join l.modification.createdUser cru
                left outer join destination.address destAddr
                left outer join origin.address originAddr
                left join l.customerLocationUsers cu with cu.status = 'A' and cu.personId = :personId
                left join customer.network n
                left join n.networkUsers nu with nu.status = 'A' and nu.userId = :personId
                left outer join car.orgServiceEntity orgService
                left join l.loadDispatchInformation dispInf
                left join l.location loc
                left join loc.accountExecutives ae with ae.status = 'A' and LOCALTIMESTAMP between ae.effectiveDate and ae.expirationDate
                left join ae.user aeU
                where
                    sa.status in (:statuses)
                    and (l.status not in (:loadStatuses) or (l.status = 'CD' and sa.type = 'DWP'))
                    and (cu.personId is not null or nu.id is not null)
        ]]>
    </query>
    <query name="com.pls.shipment.domain.ShipmentAlertEntity.Q_BY_SHIPMENT_AND_TYPE">
        <![CDATA[
                from ShipmentAlertEntity where loadId = :shipmentId and type = :type
        ]]>
    </query>
    <sql-query name="com.pls.shipment.domain.ShipmentAlertEntity.C_GENERATE_TIME_ALERTS">
        <![CDATA[
                insert into flatbed.shipment_alerts (alert_id,
                       load_id,
                       org_id,
                       type,
                       status,
                       date_created,
                       date_modified,
                       version)
                (select nextval('flatbed.ship_alerts_seq'), 
                       subq.load_id,
                       subq.org_id,
                       subq.ALERT_TYPE,
                       'A',
                       LOCALTIMESTAMP,
                       LOCALTIMESTAMP,
                       1
                    from (
                        select l.LOAD_ID,
                            l.org_id,
                            CASE WHEN (origin.scheduled_arrival - INTERVAL '30' MINUTE) <= LOCALTIMESTAMP
                                    and origin.scheduled_arrival > LOCALTIMESTAMP
                                    and origin.departure is null
                                then '30M'
                            WHEN origin.scheduled_arrival < LOCALTIMESTAMP
                                    and origin.departure is null
                                then 'MSD'
                            WHEN origin.SCHEDULED_ARRIVAL >= current_date
                                    and origin.SCHEDULED_ARRIVAL < current_date + 1
                                    and origin.departure is null
                                then 'TDY'
                            WHEN destination.SCHEDULED_ARRIVAL < LOCALTIMESTAMP
                                    and destination.departure is null
                                then 'NDL'
                            else null END as ALERT_TYPE
                        from flatbed.loads l
                        join flatbed.load_details origin on l.LOAD_ID = origin.LOAD_ID
                                and origin.LOAD_ACTION = 'P'
                                and origin.POINT_TYPE = 'O'
                        join flatbed.load_details destination on l.LOAD_ID = destination.LOAD_ID
                                and destination.LOAD_ACTION = 'D'
                                and destination.POINT_TYPE = 'D'
                        where CONTAINER_CD = 'VANLTL'
                            and ORIGINATING_SYSTEM in ('PLS2_LT', 'GS')
                            and LOAD_STATUS in ('O', 'PO', 'T', 'PA', 'AD', 'GA', 'LD', 'ML', 'PP', 'A', 'DA')
                            and (origin.departure is null or destination.departure is null)
                    ) subq
                    where subq.ALERT_TYPE is not null
                        and not exists (select 1 from flatbed.shipment_alerts sa where sa.LOAD_ID = subq.LOAD_ID and sa.TYPE = subq.ALERT_TYPE)
                )
        ]]>
    </sql-query>
    <sql-query name="com.pls.shipment.domain.ShipmentAlertEntity.D_REMOVE_TIME_ALERTS">
        <![CDATA[
                delete from flatbed.shipment_alerts sa1 where sa1.ALERT_ID in 
                    (select sa2.ALERT_ID 
                        from flatbed.shipment_alerts sa2
                        left join (
                            select l.LOAD_ID,
                                CASE WHEN (origin.scheduled_arrival - INTERVAL '30' MINUTE) <= LOCALTIMESTAMP
                                        and origin.scheduled_arrival > LOCALTIMESTAMP
                                        and origin.departure is null
                                    then '30M'
                                WHEN origin.scheduled_arrival < LOCALTIMESTAMP
                                        and origin.departure is null
                                    then 'MSD'
                                WHEN origin.SCHEDULED_ARRIVAL >= current_date
                                        and origin.SCHEDULED_ARRIVAL < current_date + 1
                                        and origin.departure is null
                                    then 'TDY'
                                WHEN destination.SCHEDULED_ARRIVAL < LOCALTIMESTAMP
                                        and destination.departure is null
                                    then 'NDL'
                                else null END as ALERT_TYPE
                            from flatbed.loads l
                            join flatbed.load_details origin on l.LOAD_ID = origin.LOAD_ID
                                    and origin.LOAD_ACTION = 'P'
                                    and origin.POINT_TYPE = 'O'
                            join flatbed.load_details destination on l.LOAD_ID = destination.LOAD_ID
                                    and destination.LOAD_ACTION = 'D'
                                    and destination.POINT_TYPE = 'D'
                            where CONTAINER_CD = 'VANLTL'
                                and ORIGINATING_SYSTEM in ('PLS2_LT', 'GS')
                                and LOAD_STATUS in ('O', 'PO', 'T', 'PA', 'AD', 'GA', 'LD', 'ML', 'PP', 'A', 'DA')
                                and (origin.departure is null or destination.departure is null)
                        ) al on al.ALERT_TYPE is not null
                                and sa2.load_id = al.LOAD_ID
                                and sa2.TYPE = al.ALERT_TYPE
                                and sa2.status <> 'I'
                        where sa2.type in ('30M','MSD','TDY', 'NDL')
                            and al.LOAD_ID is null
                    )
        ]]>
    </sql-query>
</hibernate-mapping>
