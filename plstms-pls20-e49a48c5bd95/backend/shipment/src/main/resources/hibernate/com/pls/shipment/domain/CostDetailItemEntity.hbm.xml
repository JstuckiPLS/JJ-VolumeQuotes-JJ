<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="com.pls.shipment.domain.CostDetailItemEntity.Q_GET_LOAD_JOB_NUMS_AND_FRT_CLASS">
        <return-scalar column="loadId" type="long"/>
        <return-scalar column="jobNumbers" type="string"/>
        <return-scalar column="jobPcts" type="string"/>
        <return-scalar column="commdityClass" type="string"/>
        <![CDATA[
                select l.load_id loadId, string_agg(job_number, ',') jobNumbers, string_agg(cast(percentage as varchar), ',') jobPcts, lm.commodity_class_code commdityClass 
                from loads l
                inner join INVOICE_HISTORY hist on hist.LOAD_ID = l.LOAD_ID and hist.INVOICE_ID = :invoiceId and (hist.release_status = 'S' or hist.release_status = 'R')
                inner join load_details orig on orig.load_id = l.load_id and orig.point_type = 'O'
                left outer join load_job_numbers ljn on l.load_id = ljn.load_id
                left outer join (select row_number() over(partition by load_detail_id order by commodity_class_code) rn, commodity_class_code, load_detail_id
                    from load_materials 
                    order by load_material_id desc) lm
                    on lm.load_detail_id = orig.load_detail_id and rn = 1
                where l.container_cd='VANLTL' and l.originating_system in ('PLS2_LT', 'GS')
                group by l.load_id, lm.commodity_class_code
        ]]>
    </sql-query>
    <sql-query name="com.pls.shipment.domain.CostDetailItemEntity.Q_GET_LOAD_JOB_NUMS_AND_FRT_CLASS_ADJ">
        <return-scalar column="loadId" type="long"/>
        <return-scalar column="jobNumbers" type="string"/>
        <return-scalar column="jobPcts" type="string"/>
        <return-scalar column="commodityClass" type="string"/>
        <return-scalar column="adjId" type="long"/>
        <![CDATA[
                select l.load_id loadId, string_agg(job_number, ',') jobNumbers, string_agg(cast(percentage as varchar), ',') jobPcts, lm.commodity_class_code commodityClass, faad.faa_detail_id adjId 
                from loads l
                inner join load_details orig on orig.load_id = l.load_id and orig.point_type = 'O'
                inner join finan_adj_acc_detail faad on l.load_id = faad.load_id and faad.status = 'A'
                inner join INVOICE_HISTORY hist on hist.FAA_DETAIL_ID = faad.FAA_DETAIL_ID and hist.INVOICE_ID = :invoiceId and (hist.release_status = 'S' or hist.release_status = 'R')
                left outer join load_job_numbers ljn on l.load_id = ljn.load_id
                left outer join (select row_number() over(partition by load_detail_id order by commodity_class_code) rn, commodity_class_code, load_detail_id
                    from load_materials 
                    order by load_material_id desc) lm
                    on lm.load_detail_id = orig.load_detail_id and rn = 1
                where l.container_cd='VANLTL' and l.originating_system in ('PLS2_LT', 'GS')
                group by l.load_id, lm.commodity_class_code, faad.faa_detail_id
        ]]>
    </sql-query>
    <query name="com.pls.shipment.domain.CostDetailItemEntity.Q_GET_BILL_TO_FOR_AUTOMATIC_PROCESSING">
        <![CDATA[
                select
                    bt.id as billToId,
                    cis.processingTime as processingTime,
                    ctz.name as timeZoneName,
                    (current_date - (:dayOfWeek - coalesce(cis.releaseDayOfWeek, :dayOfWeek) + (case when (:dayOfWeek <= coalesce(cis.releaseDayOfWeek, -1)) then 7 else 0 end))) as filterLoadsDate,
                    sum(case when reason.id is not null then 1 else 0 end) as rebillAdjustmentsCount
                from CostDetailItemEntity cdi
                join cdi.billTo bt
                join bt.plsCustomerTerms terms
                join bt.invoiceSettings cis with cis.processingType = 'AUTOMATIC' and coalesce(cis.processingPeriod, 'DAILY') = :processingPeriod
                    and ((:processingPeriod = 'WEEKLY' and cis.processingDayOfWeek = :dayOfWeek)
                        or (:processingPeriod = 'DAILY' and cis.processingTime + (cis.processingTimeTimezone.id * 60) between :currentMinutes - 25 and :currentMinutes + 25))
                join cis.processingTimeTimezone ctz
                left join cdi.costDetails cd with cd.status = 'A' and cd.sentToFinance != 'Y'
                left join cd.load l with l.finalizationStatus = 'AB' and coalesce(l.invoiceApproved, 'N') = 'Y' and l.status = 'CD'
                left join l.destination dest
                left join cdi.financialAccessorials adj with adj.status = 'A' and adj.sentToFinance != 'Y' and adj.financialStatus = 'ABAA'
                    and coalesce(adj.invoiceApproved, 'N') = 'Y'
                left join cdi.reason reason with (reason.code = 'RB' or reason.code = 'RS')
                where cdi.owner in ('C', 'S')
                    and (adj.id is not null or dest.departure <= current_date - (
                            :dayOfWeek - coalesce(cis.releaseDayOfWeek, :dayOfWeek) + (case when (:dayOfWeek <= coalesce(cis.releaseDayOfWeek, -1)) then 7 else 0 end)
                        )
                    )
                group by bt.id,
                    cis.processingTime,
                    ctz.name,
                    cis.releaseDayOfWeek
        ]]>
    </query>
</hibernate-mapping>