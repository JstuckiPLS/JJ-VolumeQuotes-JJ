<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <query name="com.pls.shipment.domain.FinancialAccountReceivablesEntity.Q_GET_CUST_INV_SUM_INFO">
        <![CDATA[
                select sum(case when far.invoiceDueDate >= LOCALTIMESTAMP then far.amountInvoiced else 0 end) as openSum,
                sum(case when far.invoiceDueDate < LOCALTIMESTAMP then far.amountInvoiced else 0 end) as pastDueTotalSum,
                sum(case when round(current_date - cast(far.invoiceDueDate as date)) between 0 and 30 then far.amountInvoiced else 0 end) as pastDue1Sum,
                sum(case when round(current_date - cast(far.invoiceDueDate as date)) between 31 and 60 then far.amountInvoiced else 0 end) as pastDue2Sum,
                sum(case when round(current_date - cast(far.invoiceDueDate as date)) between 61 and 90 then far.amountInvoiced else 0 end) as pastDue3Sum,
                sum(case when round(current_date - cast(far.invoiceDueDate as date)) >= 91 then far.amountInvoiced else 0 end) as pastDue4Sum
                from FinancialAccountReceivablesEntity far join far.load ld
                where ld.organization.id = :ownerId and far.invoiceActualClosedDate is null
        ]]>
    </query>
    <query name="com.pls.shipment.domain.FinancialAccountReceivablesEntity.Q_GET_CUST_UNPAID_AMOUNT">
        <![CDATA[
                select sum(case when far.invoiceDueDate < LOCALTIMESTAMP then far.amountInvoiced else 0 end) as pastDueTotalSum
                from FinancialAccountReceivablesEntity far join far.load ld
                where ld.organization.id = :ownerId and far.invoiceActualClosedDate is null
        ]]>
    </query>
    <query name="com.pls.shipment.domain.FinancialAccountReceivablesEntity.Q_GET_CUSTOMER_INVOICES">
        <![CDATA[
                select distinct ld.id as loadId,
                    fa.id as adjustmentId,
                    ld.numbers.bolNumber as bol,
                    ld.numbers.proNumber as pro,
                    ld.numbers.refNumber as ref,
                    orig.city || ', ' || orig.stateCode || ', ' || orig.zip as origin,
                    dest.city || ', ' || dest.stateCode || ', ' || dest.zip as destination,
                    (case when fa.id is null then cd.invoiceNumber else fa.invoiceNumber end) as invoiceNumber,
                    (case when fa.id is null then lar.invoiceDate else far.invoiceDate end) as invoiceDate,
                    (case when fa.id is null then lar.invoiceDueDate else far.invoiceDueDate end) as dueDate,
                    (case when fa.id is null then
                            (case when lar.invoiceDueDate > LOCALTIMESTAMP or lar.invoiceActualClosedDate is not null then 0 else round(current_date - cast(lar.invoiceDueDate as date)) end)
                        else
                            (case when far.invoiceDueDate > LOCALTIMESTAMP or far.invoiceActualClosedDate is not null then 0 else round(current_date - cast(far.invoiceDueDate as date)) end)
                        end) as overdue,
                    (case when fa.id is null then lar.amountInvoiced else far.amountInvoiced end) as invoiced,
                    (case when fa.id is null then lar.amountApplied else far.amountApplied end) as paid,
                    (case when fa.id is null then lar.amountDue else far.amountDue end) as due
                from CostDetailItemEntity cdi
                join cdi.costDetails cd
                left join cdi.financialAccessorials fa
                join cd.load ld with ld.finalizationStatus = 'FP' and ld.organization.id = :customerId
                left join ld.accountReceivables lar with lar.financialAccessorials.id is null
                left join fa.accountReceivables far
                join ld.origin od
                join od.address orig
                join ld.destination dd
                join dd.address dest
                where (fa.financialStatus = 'FP' or fa.id is null)
                    and ld.organization.id = :customerId
                    and ((fa.id is null and lar.id is not null) or (fa.id is not null and far.id is not null))
                    and (:carrierId is null or ld.carrier.id = :carrierId)
                    and (:bookedBy is null or ld.modification.createdBy = :bookedBy)
                    and (case when :invoiceType = 'OPEN' then (
                        case when (
                            (fa.id is null and lar.invoiceDueDate is not null and lar.invoiceDueDate >= LOCALTIMESTAMP) or 
                            (fa.id is not null and far.invoiceDueDate is not null and far.invoiceDueDate >= LOCALTIMESTAMP)
                        ) then TRUE else FALSE end
                    ) else TRUE end) = TRUE
                    and (case when :invoiceType = 'PAID' then (
                        case when (
                            (fa.id is null and lar.invoiceActualClosedDate is not null and lar.invoiceActualClosedDate between :paidFrom and :paidTo) or
                            (fa.id is not null and far.invoiceActualClosedDate is not null and far.invoiceActualClosedDate between :paidFrom and :paidTo)
                        ) then TRUE else FALSE end
                    ) else TRUE end) = TRUE
                    and (case when :invoiceType = 'PAST_DUE' then (
                        case when (
                            (fa.id is null and lar.invoiceDueDate is not null and lar.invoiceActualClosedDate is null
                                and (
                                    (case when :dueFrom0 is not null then (case when lar.invoiceDueDate > :dueTo0 then TRUE else FALSE end) else FALSE end) = TRUE or 
                                    (case when :dueFrom1 is not null then (case when lar.invoiceDueDate between :dueFrom1 and :dueTo1 then TRUE else FALSE end) else FALSE end) = TRUE or
                                    (case when :dueFrom2 is not null then (case when lar.invoiceDueDate between :dueFrom2 and :dueTo2 then TRUE else FALSE end) else FALSE end) = TRUE or
                                    (case when :dueTo3 is not null then (case when lar.invoiceDueDate < :dueFrom3 then TRUE else FALSE end) else FALSE end) = TRUE
                                )
                            ) or
                            (fa.id is not null and far.invoiceDueDate is not null and far.invoiceActualClosedDate is null
                                and (
                                    (case when :dueFrom0 is not null then (case when far.invoiceDueDate > :dueTo0 then TRUE else FALSE end) else FALSE end) = TRUE or
                                    (case when :dueFrom1 is not null then (case when far.invoiceDueDate between :dueFrom1 and :dueTo1 then TRUE else FALSE end) else FALSE end) = TRUE or
                                    (case when :dueFrom2 is not null then (case when far.invoiceDueDate between :dueFrom2 and :dueTo2 then TRUE else FALSE end) else FALSE end) = TRUE or
                                    (case when :dueTo3 is not null then (case when far.invoiceDueDate < :dueFrom3 then TRUE else FALSE end) else FALSE end) = TRUE
                                )
                            )
                        ) then TRUE else FALSE end
                    ) else TRUE end) = TRUE
        ]]>
    </query>
</hibernate-mapping>