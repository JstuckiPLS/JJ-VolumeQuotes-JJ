<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="com.pls.ltlrating.domain.LtlBlockLaneEntity.FIND_ACTIVE_AND_EFFECTIVE">
        <return-scalar column="id" type="long" />
        <return-scalar column="name" type="string" />
        <return-scalar column="effDate" type="date" />
        <return-scalar column="expDate" type="date" />
        <return-scalar column="notes" type="string" />
        <return-scalar column="origin" type="string" />
        <return-scalar column="destination" type="string" />
        <![CDATA[
               select distinct lobl.LTL_BLOCK_LANE_ID as id,
                    case lobl.CARRIER_ORG_ID when -1 then 'ALL'
                    when org.ORG_ID then org.scac||': '||org.name end as name,
                    lobl.eff_date as effDate, lobl.exp_date as expDate, lobl.notes as notes,
                    (select string_agg(orig.geo_value, ', ')
                     from (
                        select orig_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS orig_geo
                        where orig_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and orig_geo.geo_type = 1
                        ORDER BY orig_geo.geo_value
                        LIMIT 50) orig
                    ) origin,
                    (select string_agg(dest.geo_value, ', ')
                     from (
                        select dest_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS dest_geo
                        where dest_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and dest_geo.geo_type = 2
                        ORDER BY dest_geo.geo_value
                        LIMIT 50) dest
                    ) destination
                from LTL_ORG_BLOCK_LANE lobl, organizations org
                WHERE lobl.SHIPPER_ORG_ID = :profileId and lobl.status = 'A'
                    and (lobl.exp_date is null or lobl.exp_date > LOCALTIMESTAMP)
                    and lobl.CARRIER_ORG_ID = org.ORG_ID
                ORDER BY lobl.LTL_BLOCK_LANE_ID
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.LtlBlockLaneEntity.FIND_BY_STATUS_AND_PROFILE_ID">
        <return-scalar column="id" type="long" />
        <return-scalar column="name" type="string" />
        <return-scalar column="effDate" type="date" />
        <return-scalar column="expDate" type="date" />
        <return-scalar column="notes" type="string" />
        <return-scalar column="origin" type="string" />
        <return-scalar column="destination" type="string" />
        <![CDATA[
                select distinct lobl.LTL_BLOCK_LANE_ID as id, case lobl.CARRIER_ORG_ID when -1 then 'ALL'
                      when org.ORG_ID then org.scac||': '||org.name end as name,
                    lobl.eff_date as effDate, lobl.exp_date as expDate, lobl.notes as notes,
                    (select string_agg(orig.geo_value, ', ')
                     from (
                        select orig_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS orig_geo
                        where orig_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and orig_geo.geo_type = 1
                        ORDER BY orig_geo.geo_value
                        LIMIT 50) orig
                    ) origin,
                    (select string_agg(dest.geo_value, ', ')
                     from (
                        select dest_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS dest_geo
                        where dest_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and dest_geo.geo_type = 2
                        ORDER BY dest_geo.geo_value
                        LIMIT 50) dest
                    ) destination
                from LTL_ORG_BLOCK_LANE lobl, organizations org
                where lobl.status = :status and lobl.SHIPPER_ORG_ID = :profileId
                    and lobl.CARRIER_ORG_ID = org.ORG_ID
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.LtlBlockLaneEntity.FIND_EXPIRED">
        <return-scalar column="id" type="long" />
        <return-scalar column="name" type="string" />
        <return-scalar column="effDate" type="date" />
        <return-scalar column="expDate" type="date" />
        <return-scalar column="notes" type="string" />
        <return-scalar column="origin" type="string" />
        <return-scalar column="destination" type="string" />
        <![CDATA[
                select distinct lobl.LTL_BLOCK_LANE_ID as id, case lobl.CARRIER_ORG_ID when -1 then 'ALL'
                      when org.ORG_ID then org.scac||': '||org.name end as name,
                    lobl.eff_date as effDate, lobl.exp_date as expDate, lobl.notes as notes,
                    (select string_agg(orig.geo_value, ', ')
                     from (
                        select orig_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS orig_geo
                        where orig_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and orig_geo.geo_type = 1
                        ORDER BY orig_geo.geo_value
                        LIMIT 50) orig
                    ) origin,
                    (select string_agg(dest.geo_value, ', ')
                     from (
                        select dest_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS dest_geo
                        where dest_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and dest_geo.geo_type = 2
                        ORDER BY dest_geo.geo_value
                        LIMIT 50) dest
                    ) destination
                from LTL_ORG_BLOCK_LANE lobl, organizations org
                where lobl.status = 'A' and lobl.exp_date < LOCALTIMESTAMP
                    and lobl.SHIPPER_ORG_ID = :profileId
                    and lobl.CARRIER_ORG_ID = org.ORG_ID
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.LtlBlockLaneEntity.GET_UNBLOCKED_BLANKET_CARR_PROF_FOR_CUST">
        <return-scalar column="id" type="long" />
        <return-scalar column="name" type="string" />
        <![CDATA[
                select lpp.carrier_org_id as id, org.scac||': '||org.name as name
                from ltl_pricing_profile lpp
                JOIN organizations org on lpp.CARRIER_ORG_ID = org.ORG_ID
                where lpp.LTL_PRICING_TYPE = 'BLANKET'
                and lpp.status = 'A' and (lpp.exp_date is null or lpp.exp_date > LOCALTIMESTAMP)
                and NOT EXISTS (select 'X' from LTL_PRICING_BLOCKED_CUST lpbc
                                where lpbc.LTL_PRICING_PROFILE_ID = lpp.LTL_PRICING_PROFILE_ID
                                    and lpbc.STATUS = 'A' and lpbc.SHIPPER_ORG_ID = :profileId)
                order by org.scac, org.name
        ]]>
    </sql-query>
    <query name="com.pls.ltlrating.domain.LtlBlockLaneEntity.EXPIRE_BY_IDS">
        <![CDATA[
                UPDATE LtlBlockLaneEntity lble SET lble.expDate = current_date, lble.modification.modifiedDate = LOCALTIMESTAMP
                , lble.modification.modifiedBy = :modifiedBy WHERE lble.id IN (:ids)
        ]]>
    </query>
    <query name="com.pls.ltlrating.domain.LtlBlockLaneEntity.UPDATE_STATUS">
        <![CDATA[
                UPDATE LtlBlockLaneEntity lble SET lble.status = :status, lble.modification.modifiedDate = LOCALTIMESTAMP
                , lble.modification.modifiedBy = :modifiedBy WHERE lble.id in (:ids)
        ]]>
    </query>
    <sql-query name="com.pls.ltlrating.domain.LtlBlockLaneEntity.GET_BLOCK_LANE_BY_ID">
        <return-scalar column="id" type="long" />
        <return-scalar column="carrierId" type="long" />
        <return-scalar column="name" type="string" />
        <return-scalar column="effDate" type="date" />
        <return-scalar column="expDate" type="date" />
        <return-scalar column="notes" type="string" />
        <return-scalar column="origin" type="string" />
        <return-scalar column="destination" type="string" />
        <return-scalar column="lastModDate" type="timestamp"/>
        <return-scalar column="lastModUser" type="string" />
        <return-scalar column="version" type="long" />
        <![CDATA[
                select lobl.LTL_BLOCK_LANE_ID as id, lobl.CARRIER_ORG_ID as carrierId,
                    case lobl.CARRIER_ORG_ID when -1 then 'ALL'
                      when org.ORG_ID then org.scac||': '||org.name end as name,
                    lobl.eff_date as effDate, lobl.exp_date as expDate, lobl.notes as notes,
                    (select string_agg(orig.geo_value, ', ')
                     from (
                        select orig_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS orig_geo
                        where orig_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and orig_geo.geo_type = 1
                        ORDER BY orig_geo.geo_value
                        LIMIT 50) orig
                    ) origin,
                    (select string_agg(dest.geo_value, ', ')
                     from (
                        select dest_geo.geo_value
                        from LTL_BK_LANE_GEO_SERV_DTLS dest_geo
                        where dest_geo.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                            and dest_geo.geo_type = 2
                        ORDER BY dest_geo.geo_value
                        LIMIT 50) dest
                    ) destination,
                    lobl.DATE_MODIFIED as lastModDate, usr.FIRST_NAME||' '||usr.LAST_NAME as lastModUser,
                    lobl.version as version
                from organizations org, LTL_ORG_BLOCK_LANE lobl
                JOIN users usr on lobl.MODIFIED_BY = usr.PERSON_ID
                where lobl.LTL_BLOCK_LANE_ID = :id
                    and lobl.CARRIER_ORG_ID = org.ORG_ID
        ]]>
    </sql-query>
</hibernate-mapping>