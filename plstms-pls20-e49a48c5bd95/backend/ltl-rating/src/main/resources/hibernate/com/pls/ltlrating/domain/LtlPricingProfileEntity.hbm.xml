<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_BLANKET_PROFILE_BY_CARRIER">
        <![CDATA[
                from LtlPricingProfileEntity
                where status = 'A'
                    and ltlPricingType = 'BLANKET'
                    and carrierOrganization.id = :carrierId
                    and (:profileId is null or id <> :profileId)
                    and (cast(:expDate as date) is not null and effDate <= cast(:expDate as date) and (expDate >= cast(:effDate as date) or expDate is null)
                        or cast(:expDate as date) is null and (expDate is null or expDate >= cast(:effDate as date))
                    )
        ]]>
    </query>
    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_MARGIN_PROFILE_BY_ORG_ID">
        <![CDATA[
                from LtlPricingProfileEntity
                where status = 'A'
                    and ltlPricingType = 'MARGIN'
                    and shipperOrganization.id = :orgId
        ]]>
    </query>
    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_MARGIN_PROFILE_DETAIL_ID_BY_ORG_ID">
        <![CDATA[
                select d.id
                from LtlPricingProfileEntity e
                join e.profileDetails d
                where e.status = 'A'
                    and e.ltlPricingType = 'MARGIN'
                    and e.shipperOrganization.id = :orgId
        ]]>
    </query>
    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.UPDATE_STATUSES">
        <![CDATA[
                update LtlPricingProfileEntity p set p.status=:status where p.id in :ids
        ]]>
    </query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.FIND_PRICING_TYPE_BY_ID_QUERY">
        <return-scalar column="pricingType" type="java.lang.String"/>
        <![CDATA[
                SELECT pp.ltl_pricing_type AS pricingType
                FROM ltl_pricing_profile pp
                WHERE pp.ltl_pricing_profile_id = :id
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.FIND_PRICING_TYPE_BY_DETAIL_QUERY">
        <return-scalar column="pricingType" type="java.lang.String"/>
        <![CDATA[
                SELECT pp.ltl_pricing_type AS pricingType
                FROM ltl_pricing_profile pp
                JOIN ltl_pricing_profile_details ppd ON ppd.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                AND ppd.ltl_pric_prof_detail_id = :id
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.FIND_CHILD_PROFILE_BY_DETAILS_ID_QUERY">
        <return class="com.pls.ltlrating.domain.LtlPricingProfileEntity"/>
        <![CDATA[
                SELECT p.*
                FROM ltl_pricing_profile p
                WHERE p.ltl_pricing_type = 'BLANKET_CSP' AND p.copied_from = (SELECT pp.ltl_pricing_profile_id
                FROM ltl_pricing_profile pp
                JOIN ltl_pricing_profile_details ppd ON ppd.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                AND ppd.ltl_pric_prof_detail_id = :parentId)
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_FIND_CSP_DETAILS_BY_PARENT_DETAIL_ID">
        <![CDATA[
                SELECT pd.ltl_pric_prof_detail_id
                FROM ltl_pricing_profile p
                JOIN ltl_pricing_profile_details pd ON pd.ltl_pricing_profile_id = p.ltl_pricing_profile_id
                WHERE p.ltl_pricing_type = 'BLANKET_CSP' AND p.copied_from = (SELECT pp.ltl_pricing_profile_id
                FROM ltl_pricing_profile pp
                JOIN ltl_pricing_profile_details ppd ON ppd.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                AND ppd.ltl_pric_prof_detail_id = :ownerId)
        ]]>
    </sql-query>
    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_FIND_CSP_BY_PARENT_ID">
        <![CDATA[
            FROM LtlPricingProfileEntity ppe
            WHERE ppe.ltlPricingType = 'BLANKET_CSP' AND ppe.copiedFrom = :parentId
        ]]>
    </query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_GET_PRICES_FOR_EXPORT">
        <return-scalar column="profileId" type="java.math.BigInteger"/>
        <return-scalar column="profileDetailId" type="java.math.BigInteger"/>
        <return-scalar column="rateName" type="string"/>
        <return-scalar column="profilePriceType" type="string"/>
        <return-scalar column="profileDetailType" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="smc3TariffName" type="string"/>
        <return-scalar column="itemType" type="string"/>
        <return-scalar column="itemId" type="java.math.BigInteger"/>
        <return-scalar column="itemName" type="string"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinDist" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxDist" type="java.math.BigDecimal"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="marginDollarAmt" type="java.math.BigDecimal"/>
        <return-scalar column="effectiveFrom" type="date"/>
        <return-scalar column="effectiveTo" type="date"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="fak" type="string"/>
        <return-scalar column="customer" type="string"/>
        <return-scalar column="geoServiceId" type="java.math.BigInteger"/>
        <return-scalar column="origin" type="string"/>
        <return-scalar column="destination" type="string"/>
        <![CDATA[
           SELECT pp.ltl_pricing_profile_id AS profileId,
                  ppd.ltl_pric_prof_detail_id AS profileDetailId,
                  pp.rate_name AS rateName,
                  pp.ltl_pricing_type AS profilePriceType,
                  ppd.pricing_detail_type AS profileDetailType,
                  corg.scac AS scac,
                  ppd.smc3_tariff AS smc3TariffName,
                  'PRICE' AS itemType,
                  pd.ltl_pricing_detail_id AS itemId,
                  coalesce(pdParent.smc3_tariff, pd.smc3_tariff) AS itemName,
                  coalesce(pdParent.cost_type, pd.cost_type) AS costType,
                  coalesce(pdParent.unit_cost, pd.unit_cost) AS unitCost,
                  coalesce(pdParent.cost_appl_min_wt, pd.cost_appl_min_wt) AS costApplMinWt,
                  coalesce(pdParent.cost_appl_max_wt, pd.cost_appl_max_wt) AS costApplMaxWt,
                  coalesce(pdParent.cost_appl_min_dist, pd.cost_appl_min_dist) AS costApplMinDist,
                  coalesce(pdParent.cost_appl_max_dist, pd.cost_appl_max_dist) AS costApplMaxDist,
                  coalesce(pdParent.min_cost, pd.min_cost) AS minCost,
                  pd.margin_type AS marginType,
                  pd.unit_margin AS unitMargin,
                  pd.margin_dollar_amt AS marginDollarAmt,
                  coalesce(pdParent.eff_date, pd.eff_date) AS effectiveFrom,
                  coalesce(pdParent.exp_date, pd.exp_date) AS effectiveTo,
                  coalesce(pdParent.service_type, pd.service_type) AS serviceType,
                  coalesce(pdParent.movement_type, pd.movement_type) AS movementType,
                  (SELECT string_agg(fak, ';') from
                      (select lfm.actual_class||':'||lfm.mapping_class fak
                      FROM ltl_fak_map lfm
                      where lfm.ltl_pricing_detail_id = coalesce(pdParent.ltl_pricing_detail_id, pd.ltl_pricing_detail_id)
                      order by 1) s1) AS fak,
                  (SELECT string_agg(customer, ';') from
                      (select ship.name customer
                      FROM ltl_pricing_appl_cust lac,
                      organizations ship
                      where ship.org_id = lac.shipper_org_id
                          and lac.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                      order by 1) s2) as customer,
                  pg.ltl_pricing_geo_service_id as geoServiceId,
                  (select string_agg(origin, ', ') from
                      (select orig_geo.geo_value origin
                      from ltl_pric_geo_serv_dtls orig_geo
                      where orig_geo.ltl_pricing_geo_service_id = pg.ltl_pricing_geo_service_id
                          and orig_geo.geo_type = 1
                      order by 1
                      limit 300) s3
                  ) origin,
                  (select string_agg(destination, ', ') from
                      (select dest_geo.geo_value destination
                      from ltl_pric_geo_serv_dtls dest_geo
                      where dest_geo.ltl_pricing_geo_service_id = pg.ltl_pricing_geo_service_id
                          and dest_geo.geo_type = 2
                      order by 1
                      limit 300) s4
                  ) destination
           FROM ltl_pricing_profile pp
           JOIN ltl_pricing_profile_details ppd ON ppd.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
           LEFT OUTER JOIN ltl_pricing_details pd ON ppd.ltl_pric_prof_detail_id = pd.ltl_pric_prof_detail_id
           LEFT OUTER JOIN ltl_pricing_details pdParent ON pdParent.ltl_pricing_detail_id = pd.parent_id -- this is blanket profile in case of Blanket/CSP
           LEFT OUTER JOIN ltl_pricing_geo_services pg ON coalesce(pdParent.ltl_pricing_detail_id, pd.ltl_pricing_detail_id) = pg.ltl_pricing_detail_id
           LEFT OUTER JOIN organizations corg ON corg.org_id = pp.carrier_org_id
           WHERE pp.status = 'A' AND coalesce(pdParent.status, pd.status) = 'A' AND (pp.exp_date IS NULL OR pp.exp_date > current_date - 1)
                 AND (pdParent.ltl_pricing_detail_id is null and (pd.exp_date IS NULL OR pd.exp_date > current_date - 1)
                     or pdParent.ltl_pricing_detail_id is not null and (pdParent.exp_date IS NULL OR pdParent.exp_date > current_date - 1))
           ORDER BY pp.ltl_pricing_profile_id, ppd.ltl_pric_prof_detail_id, pd.ltl_pricing_detail_id
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_GET_ACCESSORIALS_FOR_EXPORT">
        <return-scalar column="profileId" type="java.math.BigInteger"/>
        <return-scalar column="profileDetailId" type="java.math.BigInteger"/>
        <return-scalar column="rateName" type="string"/>
        <return-scalar column="profilePriceType" type="string"/>
        <return-scalar column="profileDetailType" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="smc3TariffName" type="string"/>
        <return-scalar column="itemType" type="string"/>
        <return-scalar column="itemId" type="java.math.BigInteger"/>
        <return-scalar column="itemName" type="string"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinDist" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxDist" type="java.math.BigDecimal"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="maxCost" type="java.math.BigDecimal"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="marginPercent" type="java.math.BigDecimal"/>
        <return-scalar column="marginDollarAmt" type="java.math.BigDecimal"/>
        <return-scalar column="effectiveFrom" type="date"/>
        <return-scalar column="effectiveTo" type="date"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="fak" type="string"/>
        <return-scalar column="customer" type="string"/>
        <return-scalar column="geoServiceId" type="java.math.BigInteger"/>
        <return-scalar column="origin" type="string"/>
        <return-scalar column="destination" type="string"/>
        <![CDATA[
           SELECT pp.ltl_pricing_profile_id AS profileId, ppd.ltl_pric_prof_detail_id AS profileDetailId,
                pp.rate_name AS rateName, pp.ltl_pricing_type AS profilePriceType,
                ppd.pricing_detail_type AS profileDetailType, corg.scac AS scac, ppd.smc3_tariff AS smc3TariffName,
                'ACCESSORIAL' AS itemType, la.ltl_accessorial_id AS itemId, la.accessorial_type AS itemName,
                la.cost_type AS costType, la.unit_cost AS unitCost, la.cost_appl_min_wt AS costApplMinWt,
                la.cost_appl_max_wt AS costApplMaxWt, la.cost_appl_min_dist AS costApplMinDist,
                la.cost_appl_max_dist AS costApplMaxDist, la.min_cost AS minCost, la.max_cost AS maxCost,
                la.margin_type AS marginType, la.unit_margin AS unitMargin, la.margin_percent AS marginPercent,
                la.margin_dollar_amt AS marginDollarAmt, la.eff_date AS effectiveFrom, la.exp_date AS effectiveTo,
                la.service_type AS serviceType, la.movement_type AS movementType,
                NULL AS fak,
                (SELECT string_agg(customer, ';') from
                    (select ship.name customer
                    FROM ltl_pricing_appl_cust lac,
                    organizations ship
                    where ship.org_id = lac.shipper_org_id
                        and lac.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                    order by 1
                    ) s1
                ) as customer,
                lg.ltl_acc_geo_service_id as geoServiceId, lg.origin as origin, lg.destination as destination
           FROM ltl_pricing_profile pp
                JOIN ltl_pricing_profile_details ppd ON ppd.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                LEFT OUTER JOIN ltl_accessorials la ON ppd.ltl_pric_prof_detail_id = la.ltl_pric_prof_detail_id
                LEFT OUTER JOIN ltl_acc_geo_services lg ON la.ltl_accessorial_id = lg.ltl_accessorial_id
                LEFT OUTER JOIN organizations corg ON corg.org_id = pp.carrier_org_id
           WHERE pp.status = 'A' AND la.status = 'A' AND (pp.exp_date IS NULL OR pp.exp_date > current_date - 1)
                 AND (la.exp_date IS NULL OR la.exp_date > current_date - 1)
           ORDER BY pp.ltl_pricing_profile_id, ppd.ltl_pric_prof_detail_id, la.ltl_accessorial_id
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_GET_FUEL_FOR_EXPORT">
        <return-scalar column="profileId" type="java.math.BigInteger"/>
        <return-scalar column="profileDetailId" type="java.math.BigInteger"/>
        <return-scalar column="rateName" type="string"/>
        <return-scalar column="profilePriceType" type="string"/>
        <return-scalar column="profileDetailType" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="smc3TariffName" type="string"/>
        <return-scalar column="itemType" type="string"/>
        <return-scalar column="itemId" type="java.math.BigInteger"/>
        <return-scalar column="itemName" type="string"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinDist" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxDist" type="java.math.BigDecimal"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="maxCost" type="java.math.BigDecimal"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="marginPercent" type="java.math.BigDecimal"/>
        <return-scalar column="marginDollarAmt" type="java.math.BigDecimal"/>
        <return-scalar column="effectiveFrom" type="date"/>
        <return-scalar column="effectiveTo" type="date"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="fak" type="string"/>
        <return-scalar column="customer" type="string"/>
        <return-scalar column="geoServiceId" type="java.math.BigInteger"/>
        <return-scalar column="origin" type="string"/>
        <return-scalar column="destination" type="string"/>
        <![CDATA[
           SELECT pp.ltl_pricing_profile_id AS profileId, ppd.ltl_pric_prof_detail_id AS profileDetailId,
                pp.rate_name AS rateName, pp.ltl_pricing_type AS profilePriceType,
                ppd.pricing_detail_type AS profileDetailType, corg.scac AS scac, ppd.smc3_tariff AS smc3TariffName,
                'FUEL' AS itemType, lf.ltl_fuel_surcharge_id AS itemId, NULL  AS itemName, NULL  AS costType,
                lf.surcharge AS unitCost, NULL AS costApplMinWt, NULL AS costApplMaxWt, NULL AS costApplMinDist,
                NULL costApplMaxDist, lf.min_rate AS minCost, lf.max_rate AS maxCost, NULL AS marginType,
                NULL AS unitMargin, NULL AS marginPercent, NULL AS marginDollarAmt, NULL AS effectiveFrom,
                NULL AS effectiveTo, NULL AS serviceType, NULL AS movementType, NULL AS fak,
                (SELECT string_agg(customer, ';') from
                    (select ship.name customer
                    FROM ltl_pricing_appl_cust lac,
                    organizations ship
                    where ship.org_id = lac.shipper_org_id
                        and lac.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                    order by 1
                    ) s1
                ) as customer,
                NULL AS geoServiceId, NULL AS origin, NULL AS destination
           FROM ltl_pricing_profile pp
                JOIN ltl_pricing_profile_details ppd ON ppd.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                LEFT OUTER JOIN ltl_fuel_surcharge lf ON ppd.ltl_pric_prof_detail_id = lf.ltl_pric_prof_detail_id
                LEFT OUTER JOIN organizations corg ON corg.org_id = pp.carrier_org_id
           WHERE pp.status = 'A' AND lf.status = 'A' AND (pp.exp_date IS NULL OR pp.exp_date > current_date - 1)
           ORDER BY pp.ltl_pricing_profile_id, ppd.ltl_pric_prof_detail_id, lf.ltl_fuel_surcharge_id
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_GET_PALLET_PRICES_FOR_EXPORT">
        <return-scalar column="profileId" type="java.math.BigInteger"/>
        <return-scalar column="profileDetailId" type="java.math.BigInteger"/>
        <return-scalar column="rateName" type="string"/>
        <return-scalar column="profilePriceType" type="string"/>
        <return-scalar column="profileDetailType" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="smc3TariffName" type="string"/>
        <return-scalar column="itemType" type="string"/>
        <return-scalar column="itemId" type="java.math.BigInteger"/>
        <return-scalar column="itemName" type="string"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxWt" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMinDist" type="java.math.BigDecimal"/>
        <return-scalar column="costApplMaxDist" type="java.math.BigDecimal"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="maxCost" type="java.math.BigDecimal"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="marginPercent" type="java.math.BigDecimal"/>
        <return-scalar column="marginDollarAmt" type="java.math.BigDecimal"/>
        <return-scalar column="effectiveFrom" type="date"/>
        <return-scalar column="effectiveTo" type="date"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="fak" type="string"/>
        <return-scalar column="customer" type="string"/>
        <return-scalar column="geoServiceId" type="java.math.BigInteger"/>
        <return-scalar column="origin" type="string"/>
        <return-scalar column="destination" type="string"/>
        <![CDATA[
           SELECT pp.ltl_pricing_profile_id AS profileId, ppd.ltl_pric_prof_detail_id AS profileDetailId,
                pp.rate_name AS rateName, pp.ltl_pricing_type AS profilePriceType,
                ppd.pricing_detail_type AS profileDetailType, corg.scac AS scac, ppd.smc3_tariff AS smc3TariffName,
                'PALLET' AS itemType, pl.ltl_pallet_pric_det_id AS itemId, null AS itemName,
                pl.cost_type AS costType, pl.unit_cost AS unitCost, pl.cost_appl_min_wt AS costApplMinWt,
                pl.cost_appl_min_wt AS costApplMaxWt, null AS costApplMinDist,
                null AS costApplMaxDist, pl.min_qty AS minCost, pl.max_qty AS maxCost,
                null AS marginType, pl.transit_time AS unitMargin, pl.margin_percent AS marginPercent,
                null AS marginDollarAmt, pl.eff_date AS effectiveFrom, pl.exp_date AS effectiveTo,
                pl.service_type AS serviceType, pl.movement_type AS movementType, NULL AS fak,
                (SELECT string_agg(customer, ';') from
                    (select ship.name customer
                    FROM ltl_pricing_appl_cust lac,
                    organizations ship
                    where ship.org_id = lac.shipper_org_id
                        and lac.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                    order by 1) s1
                ) as customer,
                NULL AS geoServiceId, zf.name AS origin,
                zt.name AS destination
           FROM ltl_pricing_profile pp
                JOIN ltl_pricing_profile_details ppd ON ppd.ltl_pricing_profile_id = pp.ltl_pricing_profile_id
                LEFT OUTER JOIN ltl_pallet_pric_details pl on ppd.ltl_pric_prof_detail_id = pl.ltl_pric_prof_detail_id
                LEFT OUTER JOIN ltl_zones zf ON pl.zone_from = zf.ltl_zone_id
                LEFT OUTER JOIN ltl_zones zt ON pl.zone_to = zt.ltl_zone_id
                LEFT OUTER JOIN organizations corg ON corg.org_id = pp.carrier_org_id
           WHERE pp.status = 'A' AND pl.status = 'A' AND (pp.exp_date IS NULL OR pp.exp_date > current_date - 1)
                 AND (pl.exp_date IS NULL OR pl.exp_date > current_date - 1)
           ORDER BY pp.ltl_pricing_profile_id, ppd.ltl_pric_prof_detail_id, pl.ltl_pallet_pric_det_id
        ]]>
    </sql-query>

    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.FIND_TARIFFS">
        <![CDATA[
           select
           distinct profile.id as ltlPricingProfileId,
           profile.rateName as rateName,
           profile.effDate as effDate,
           profile.expDate as expDate,
           pricingType.description as pricingType,
           carOrg.id as carrierOrgId,
           carOrg.scac as scac,
           carOrg.name as carrierName

           from LtlPricingProfileEntity profile
               left outer join profile.applicableCustomers as appCustomer
               left outer join appCustomer.customer as customer
               left outer join profile.pricingType as pricingType
               left outer join profile.carrierOrganization as carOrg
               left outer join profile.shipperOrganization as shipOrg

            where (:customerId is null or customer.id = :customerId or shipOrg.id =:customerId)
            and (cast (:fromEffDate as date) is null or profile.effDate >= cast (:fromEffDate as date))
            and (cast (:toEffDate as date) is null or profile.effDate <= cast (:toEffDate as date))
            and (cast (:fromExpDate as date) is null or profile.expDate >= cast (:fromExpDate as date))
            and (cast (:toExpDate as date) is null or profile.expDate <= cast (:toExpDate as date))
            and (profile.ltlPricingType in (:ltlPricingType))
            and profile.status = :status
            and (:pricingGroup is null or
            ((:pricingGroup = 'CARRIER' and profile.ltlPricingType != 'MARGIN') or (:pricingGroup <> 'CARRIER' and shipOrg is not null)))
            order by ltlPricingProfileId DESC
        ]]>
    </query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_CARRIER_RATES_WITH_USE_BLANKET">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="pricingDetailType" type="string"/>
        <return-scalar column="carrierName" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="effectiveDate" type="date"/>
        <return-scalar column="useBlanket" type="string"/>
        <return-scalar column="blockedFrmBkng" type="string"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                lppe.carrier_org_id as carrierOrgId,
                lppe.ltl_pricing_type as pricingType,
                lppde.pricing_detail_type as pricingDetailType,
                carr_org.name as carrierName,
                carr_org.scac as scac,
                lppe.eff_date as effectiveDate,
                lppde.use_blanket as useBlanket,
                lppe.BLOCKED_FROM_BOOKING as blockedFrmBkng,
                :shipperOrgId as shipperOrgId
            from organizations carr_org
            join ltl_pricing_profile_details lppde on lppde.use_blanket = 'Y'
                                                   and lppde.ltl_pric_prof_detail_id not in (:pricProfDtlId)
            join ltl_pricing_profile lppe on lppe.status = 'A'
                                          and carr_org.org_id = lppe.carrier_org_id
                                          and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                                          and lppe.carrier_org_id in (:carriersWithPricing)
                                          and lppe.eff_date <= :shipDate
                                          and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                                          and lppe.ltl_pricing_profile_id not in (
                                              select ltl_pricing_profile_id
                                              from ltl_pricing_blocked_cust
                                              where shipper_org_id = :shipperOrgId
                                                  and status = 'A'
                                          )
                                          and (lppe.carrier_org_id = :carrierId or :carrierId = -1)
            join ltl_pricing_appl_cust applCust on applCust.shipper_org_id = :shipperOrgId
                                                and applCust.status = 'A'
                                                and applCust.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
            where carr_org.status = 'A'
            order by lppe.eff_date desc
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_BLANKET_API_PROFILES">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="pricingDetailType" type="string"/>
        <return-scalar column="ratingCarrierType" type="string"/>
        <return-scalar column="carrierName" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="currencyCode" type="string"/>
        <return-scalar column="effectiveDate" type="date"/>
        <return-scalar column="blockedFrmBkng" type="string"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                lppe.carrier_org_id as carrierOrgId,
                lppe.ltl_pricing_type as pricingType,
                lppde.pricing_detail_type as pricingDetailType,
                lppde.ltl_rating_carrier_type as ratingCarrierType,
                carr_org.name as carrierName,
                carr_org.scac as scac,
                carr_org.currency_code as currencyCode,
                lppe.eff_date as effectiveDate,
                lppde.use_blanket as useBlanket,
                lppe.BLOCKED_FROM_BOOKING as blockedFrmBkng,
                :shipperOrgId as shipperOrgId
            from organizations carr_org
            join ltl_pricing_profile lppe on lppe.status = 'A'
                                          and lppe.ltl_pricing_type = 'BLANKET'
                                          and carr_org.org_id = lppe.carrier_org_id
                                          and lppe.eff_date <= :shipDate
                                          and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                                          and (:shipperOrgId is null or lppe.ltl_pricing_profile_id not in (
                                              select ltl_pricing_profile_id
                                              from ltl_pricing_blocked_cust
                                              where shipper_org_id = :shipperOrgId
                                                  and status = 'A'
                                          ))
            join ltl_pricing_profile_details lppde on lppde.ltl_rating_carrier_type = 'CARRIER_API'
                                                   and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
            where carr_org.status = 'A'
                and (:shipperOrgId is null
                    or not exists ( -- no CSP tariff for specified customer
                        select 'X'
                        from ltl_pricing_profile lpp_new,
                            ltl_pricing_appl_cust lpac
                        where lpac.shipper_org_id = :shipperOrgId
                            and lpac.status = 'A'
                            and lpp_new.status = 'A'
                            and lpac.ltl_pricing_profile_id = lpp_new.ltl_pricing_profile_id
                            and lpp_new.carrier_org_id = lppe.carrier_org_id
                            and lpp_new.ltl_pricing_type <> 'BLANKET'
                            and lpp_new.ltl_pricing_type <> 'BUY_SELL')
                )
            order by lppe.eff_date desc
        ]]>
    </sql-query>
    
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_LTLLC_PROFILES">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="pricingDetailType" type="string"/>
        <return-scalar column="ratingCarrierType" type="string"/>
        <return-scalar column="carrierName" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="actualCarrierScac" type="string"/>
        <return-scalar column="currencyCode" type="string"/>
        <return-scalar column="effectiveDate" type="date"/>
        <return-scalar column="blockedFrmBkng" type="string"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <return-scalar column="mileageType" type="string"/>
        <return-scalar column="mileageVersion" type="string"/>
        <return-scalar column="dispatchWithLtllc" type="boolean"/>
        <return-scalar column="integrationType" type="string"/>
        <return-scalar column="note" type="string"/>
        <return-scalar column="prohibitedCommodities" type="string"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                lppe.carrier_org_id as carrierOrgId,
                lppe.ltl_pricing_type as pricingType,
                lppde.pricing_detail_type as pricingDetailType,
                lppde.ltl_rating_carrier_type as ratingCarrierType,
                carr_org.name as carrierName,
                carr_org.scac as scac,
                coalesce(act_carrier.scac, carr_org.act_scac) as actualCarrierScac,
                carr_org.currency_code as currencyCode,
                lppe.eff_date as effectiveDate,
                lppde.use_blanket as useBlanket,
                lppe.BLOCKED_FROM_BOOKING as blockedFrmBkng,
                :shipperOrgId as shipperOrgId,
                lppde.mileage_type as mileageType,
                lppde.mileage_version as mileageVersion,
                lppe.dispatch_with_ltllc dispatchWithLtllc,
                coalesce(orgSvc.pickup, 'EDI') as integrationType,
                lppe.note as note,
                lppe.prohibited_commodities as prohibitedCommodities
            from organizations carr_org
            join ltl_pricing_profile lppe on lppe.status = 'A'
                                          and (lppe.ltl_pricing_type = 'BLANKET' or (lppe.ltl_pricing_type = 'CSP' and exists (select 1 from flatbed.ltl_pricing_appl_cust cspcid where cspcid.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id and cspcid.shipper_org_id = :shipperOrgId and cspcid.status ='A')))
                                          and carr_org.org_id = lppe.carrier_org_id
                                          and lppe.eff_date <= :shipDate
                                          and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                                          and (:shipperOrgId is null or lppe.ltl_pricing_profile_id not in (
                                              select ltl_pricing_profile_id
                                              from ltl_pricing_blocked_cust
                                              where shipper_org_id = :shipperOrgId
                                                  and status = 'A'
                                          ))
                                          and (lppe.carrier_org_id = :carrierOrgId or :carrierOrgId is null)
            join ltl_pricing_profile_details lppde on lppde.ltl_rating_carrier_type = 'LTLLC'
                                                   and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
            left join ltl_pricing_profile childLppe on lppe.ltl_pricing_type = 'BLANKET'
                                                    and childLppe.ltl_pricing_profile_id in (
                                                        select lpp2.ltl_pricing_profile_id from ltl_pricing_profile lpp2
                                                        join ltl_pricing_appl_cust applCust2 on applCust2.ltl_pricing_profile_id = lpp2.ltl_pricing_profile_id
                                                        where applCust2.shipper_org_id = :shipperOrgId and applCust2.status = 'A' and lpp2.status = 'A'
                                                            and lpp2.carrier_org_id = lppe.carrier_org_id and lpp2.LTL_PRICING_TYPE = 'BLANKET_CSP'
                                                    )
            left join organizations act_carrier on act_carrier.org_id = lppe.act_carrier_org_id
                                                and act_carrier.status = 'A'
            left join ORG_SERVICES orgSvc on orgSvc.ORG_ID = carr_org.org_id
            left join pricing_blocked_geo_details blockedLanes on
                     (
                         (blockedLanes.orig_geo_serv_type = 1 and blockedLanes.orig_searchable_Geo_Value = :originZip)
                         or (blockedLanes.orig_geo_serv_type = 2 and blockedLanes.orig_searchable_Geo_Value = :origin3DigitZip)
                         or (blockedLanes.orig_geo_serv_type = 3 and blockedLanes.origMinZip <= cast(:originZip as numeric) and blockedLanes.origMaxZip >= cast(:originZip as numeric))
                         or (blockedLanes.orig_geo_serv_type = 4 and blockedLanes.origMinShortZip <= cast(:origin3DigitZip as numeric) and blockedLanes.origMaxShortZip >= cast(:origin3DigitZip as numeric))
                         or (blockedLanes.orig_geo_serv_type = 5 and (blockedLanes.orig_searchable_Geo_Value = :originCity or blockedLanes.orig_searchable_Geo_Value = :originZip))
                         or (blockedLanes.orig_geo_serv_type = 6 and blockedLanes.orig_searchable_Geo_Value = :originState)
                         or (blockedLanes.orig_geo_serv_type = 7 and blockedLanes.orig_searchable_Geo_Value = :originCountry)
                     )
                     and (
                         (blockedLanes.dest_geo_serv_type = 1 and blockedLanes.dest_searchable_Geo_Value = :destZip)
                         or (blockedLanes.dest_geo_serv_type = 2 and blockedLanes.dest_searchable_Geo_Value = :dest3DigitZip)
                         or (blockedLanes.dest_geo_serv_type = 3 and blockedLanes.destMinZip <= cast(:destZip as numeric) and blockedLanes.destMaxZip >= cast(:destZip as numeric))
                         or (blockedLanes.dest_geo_serv_type = 4 and blockedLanes.destMinShortZip <= cast(:dest3DigitZip as numeric) and blockedLanes.destMaxShortZip >= cast(:dest3DigitZip as numeric))
                         or (blockedLanes.dest_geo_serv_type = 5 and (blockedLanes.dest_searchable_Geo_Value = :destCity or blockedLanes.dest_searchable_Geo_Value = :destZip))
                         or (blockedLanes.dest_geo_serv_type = 6 and blockedLanes.dest_searchable_Geo_Value = :destState)
                         or (blockedLanes.dest_geo_serv_type = 7 and blockedLanes.dest_searchable_Geo_Value = :destCountry)
                     )
                     and (
                         (blockedLanes.customerId is null                                               --Pricing/Block Carrier Zip
                             and blockedLanes.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
                         )
                         or (:shipperOrgId is not null                                                   --Customer/Block Lane
                             and blockedLanes.customerId is not null
                             and blockedLanes.customerId = :shipperOrgId
                             and :shipDate between blockedLanes.eff_date and blockedLanes.exp_date
                             and (blockedLanes.CARRIERID = lppe.CARRIER_ORG_ID or blockedLanes.CARRIERID = -1)
                             and lppe.LTL_PRICING_TYPE = 'BLANKET'
                         )
                     )
            where carr_org.status = 'A'
                and (
                      lppe.ltl_pricing_type = 'BLANKET' 
                      or (lppe.ltl_pricing_type = 'CSP' 
                           and not exists (select 1 from flatbed.ltl_pricing_details lpde where lpde.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id and lpde.status = 'A' )
                         )
                    )
                and blockedLanes.ltl_pric_prof_detail_id is null    --GET non blocked lanes (on profile level)
                and blockedLanes.customerId is null                 --GET non blocked lanes (on customer level)
                and (:specificProfiles = 'N' or lppe.ltl_pricing_profile_id in (:pricingProfileIDs) or childLppe.ltl_pricing_profile_id in (:pricingProfileIDs))
                and (:shipperOrgId is null
                    or not exists ( -- no CSP or Buy/Sell tariff for specified customer
                        select 'X'
                        from ltl_pricing_profile lpp_new,
                            ltl_pricing_appl_cust lpac
                        where lpac.shipper_org_id = :shipperOrgId
                            and lpp_new.ltl_pricing_profile_id != lppe.ltl_pricing_profile_id
                            and lpac.status = 'A'
                            and lpp_new.status = 'A'
                            and lpac.ltl_pricing_profile_id = lpp_new.ltl_pricing_profile_id
                            and lpp_new.carrier_org_id = lppe.carrier_org_id
                            and lpp_new.ltl_pricing_type <> 'BLANKET')
                )
            order by lppe.eff_date desc
        ]]>
    </sql-query>
    
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_LTLLC_PROFILE_SUMMARIES">
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="currencyCode" type="string"/>
        <![CDATA[
            select 
                coalesce(carr_org.act_scac, carr_org.scac) scac,  
                lppe.ltl_pricing_type pricingType,
                carr_org.currency_code as currencyCode
            from
                ltl_pricing_profile lppe 
                join ltl_pricing_profile_details lppde on lppde.ltl_rating_carrier_type = 'LTLLC' and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                join organizations carr_org on carr_org.org_id = lppe.carrier_org_id and carr_org.status = 'A'
            where 
                lppe.status = 'A'
                and lppe.eff_date <= :shipDate
                and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                and (lppe.carrier_org_id = :carrierOrgId or :carrierOrgId is null)
                and 
                (
                    lppe.ltl_pricing_type = 'BLANKET' or
                    exists (select 1 from ltl_pricing_appl_cust pac where pac.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id and pac.shipper_org_id = :shipperOrgId)
                )
                and (:shipperOrgId is null or lppe.ltl_pricing_profile_id not in (
                         select ltl_pricing_profile_id
                         from ltl_pricing_blocked_cust
                         where shipper_org_id = :shipperOrgId
                             and status = 'A'
                     ))
        ]]>
    </sql-query>
    
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_CUSTOMER_PRICING_PROFILE">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="minMarginFlat" type="java.math.BigDecimal"/>
        <return-scalar column="geoLevel" type="int"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="pricingDetailType" type="string"/>
        <return-scalar column="pricingDetailId" type="long"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                lpde.margin_type as marginType,
                lpde.unit_margin as unitMargin,
                lpde.margin_dollar_amt as minMarginFlat,
                pgdo.orig_geo_serv_type + pgdd.dest_geo_serv_type as geoLevel,
                'MARGIN' as pricingType,
                lppde.pricing_detail_type as pricingDetailType,
                lpde.LTL_PRICING_DETAIL_ID as pricingDetailId,
                :shipperOrgId as shipperOrgId
            from ltl_pricing_profile lppe,
                ltl_pricing_profile_details lppde,
                ltl_pricing_details lpde,
                PRICING_GEO_DETAILS_ORIG pgdo,
                PRICING_GEO_DETAILS_DEST pgdd
            where lppe.status = 'A'
                and lpde.status = 'A'
                and lppe.ltl_pricing_type = 'MARGIN'
                and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                and lpde.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
                and lppe.shipper_org_id = :shipperOrgId
                and lppe.eff_date <= :shipDate
                and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                and (lpde.eff_date <= :shipDate or lpde.eff_date is null )
                and (lpde.exp_date is null or lpde.exp_date >= :shipDate)
                and lpde.ltl_pricing_detail_id = pgdo.ltl_pricing_detail_id
                and (
                    (pgdo.orig_geo_serv_type = 1 and pgdo.orig_searchable_Geo_Value = :originZip)
                    or (pgdo.orig_geo_serv_type = 2 and pgdo.orig_searchable_Geo_Value = :origin3DigitZip)
                    or (pgdo.orig_geo_serv_type = 3 and pgdo.origMinZip <= cast(:originZip as numeric) and pgdo.origMaxZip >= cast(:originZip as numeric))
                    or (pgdo.orig_geo_serv_type = 4 and pgdo.origMinShortZip <= cast(:origin3DigitZip as numeric) and pgdo.origMaxShortZip >= cast(:origin3DigitZip as numeric))
                    or (pgdo.orig_geo_serv_type = 5 and (pgdo.orig_searchable_Geo_Value = :originCity or pgdo.orig_searchable_Geo_Value = :originZip))
                    or (pgdo.orig_geo_serv_type = 6 and pgdo.orig_searchable_Geo_Value = :originState)
                    or (pgdo.orig_geo_serv_type = 7 and pgdo.orig_searchable_Geo_Value = :originCountry)
                )
                and lpde.ltl_pricing_detail_id = pgdd.ltl_pricing_detail_id
                and pgdo.ltl_pricing_geo_service_id = pgdd.ltl_pricing_geo_service_id
                and (
                    (pgdd.dest_geo_serv_type = 1 and pgdd.dest_searchable_Geo_Value = :destZip)
                    or (pgdd.dest_geo_serv_type = 2 and pgdd.dest_searchable_Geo_Value = :dest3DigitZip)
                    or (pgdd.dest_geo_serv_type = 3 and pgdd.destMinZip <= cast(:destZip as numeric) and pgdd.destMaxZip >= cast(:destZip as numeric))
                    or (pgdd.dest_geo_serv_type = 4 and pgdd.destMinShortZip <= cast(:dest3DigitZip as numeric) and pgdd.destMaxShortZip >= cast(:dest3DigitZip as numeric))
                    or (pgdd.dest_geo_serv_type = 5 and (pgdd.dest_searchable_Geo_Value = :destCity or pgdd.dest_searchable_Geo_Value = :destZip))
                    or (pgdd.dest_geo_serv_type = 6 and pgdd.dest_searchable_Geo_Value = :destState)
                    or (pgdd.dest_geo_serv_type = 7 and pgdd.dest_searchable_Geo_Value = :destCountry)
                )
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_BENCHMARK_RATES">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="smc3Tariff" type="string"/>
        <return-scalar column="mileageType" type="string"/>
        <return-scalar column="mileageVersion" type="string"/>
        <return-scalar column="mscale" type="string"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="geoLevel" type="int"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="pricingDetailType" type="string"/>
        <return-scalar column="ratingCarrierType" type="string"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="minMarginFlat" type="java.math.BigDecimal"/>
        <return-scalar column="minMiles" type="java.math.BigDecimal"/>
        <return-scalar column="maxMiles" type="java.math.BigDecimal"/>
        <return-scalar column="pricingDetailId" type="long"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="fakMappingAvailable" type="string"/>
        <return-scalar column="singleFakMappingClass" type="string"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                coalesce(lpde.smc3_tariff, lppde.smc3_tariff) as smc3Tariff,
                lppde.mileage_type as mileageType,
                lppde.mileage_version as mileageVersion,
                lppde.mscale as mscale,
                coalesce(lppe.carrier_org_id, -1) as carrierOrgId,
                lpde.cost_type as costType,
                lpde.unit_cost as unitCost,
                lpde.min_cost as minCost,
                pgdo.orig_geo_serv_type + pgdd.dest_geo_serv_type as geoLevel,
                lpde.movement_type as movementType,
                lpde.service_type as serviceType,
                lppe.ltl_pricing_type as pricingType,
                lppde.pricing_detail_type as pricingDetailType,
                lppde.ltl_rating_carrier_type as ratingCarrierType,
                lpde.margin_type as marginType,
                lpde.unit_margin as unitMargin,
                lpde.margin_dollar_amt as minMarginFlat,
                lpde.cost_appl_min_dist as minMiles,
                lpde.cost_appl_max_dist as maxMiles,
                lpde.LTL_PRICING_DETAIL_ID as pricingDetailId,
                case when (lppe.carrier_org_id is null) then
                       'ALL'
                    else
                       (select carr_org.scac from organizations carr_org where carr_org.org_id = lppe.carrier_org_id)
                    end as scac,
                case when :commodityClassEnum is null
                        and (select count('X') from LTL_FAK_MAP lfm where lfm.LTL_PRICING_DETAIL_ID = lpde.LTL_PRICING_DETAIL_ID) > 0
                    then 'Y'
                    else 'N' end as fakMappingAvailable,
                lfm.MAPPING_CLASS as singleFakMappingClass,
                :shipperOrgId as shipperOrgId
            from ltl_pricing_profile lppe
            join ltl_pricing_profile_details lppde on lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
            join ltl_pricing_details lpde on lpde.status = 'A'
                                          and lpde.movement_type in ('BOTH', :movementType)
                                          and lpde.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
                                          and (lpde.cost_appl_min_wt <= :totalWeight or lpde.cost_appl_min_wt is null)
                                          and (lpde.cost_appl_max_wt >= :totalWeight or lpde.cost_appl_max_wt is null)
                                          and (lpde.eff_date <= :shipDate or lpde.eff_date is null)
                                          and (lpde.exp_date is null or lpde.exp_date >= :shipDate)
            join PRICING_GEO_DETAILS_ORIG pgdo on lpde.ltl_pricing_detail_id = pgdo.ltl_pricing_detail_id
                    and (
                        (pgdo.orig_geo_serv_type = 1 and pgdo.orig_searchable_Geo_Value = :originZip)
                        or (pgdo.orig_geo_serv_type = 2 and pgdo.orig_searchable_Geo_Value = :origin3DigitZip)
                        or (pgdo.orig_geo_serv_type = 3 and pgdo.origMinZip <= cast(:originZip as numeric) and pgdo.origMaxZip >= cast(:originZip as numeric))
                        or (pgdo.orig_geo_serv_type = 4 and pgdo.origMinShortZip <= cast(:origin3DigitZip as numeric) and pgdo.origMaxShortZip >= cast(:origin3DigitZip as numeric))
                        or (pgdo.orig_geo_serv_type = 5 and (pgdo.orig_searchable_Geo_Value = :originCity or pgdo.orig_searchable_Geo_Value = :originZip))
                        or (pgdo.orig_geo_serv_type = 6 and pgdo.orig_searchable_Geo_Value = :originState)
                        or (pgdo.orig_geo_serv_type = 7 and pgdo.orig_searchable_Geo_Value = :originCountry)
                    )
            join PRICING_GEO_DETAILS_DEST pgdd on lpde.ltl_pricing_detail_id = pgdd.ltl_pricing_detail_id
                    and pgdo.ltl_pricing_geo_service_id = pgdd.ltl_pricing_geo_service_id
                    and (
                        (pgdd.dest_geo_serv_type = 1 and pgdd.dest_searchable_Geo_Value = :destZip)
                        or (pgdd.dest_geo_serv_type = 2 and pgdd.dest_searchable_Geo_Value = :dest3DigitZip)
                        or (pgdd.dest_geo_serv_type = 3 and pgdd.destMinZip <= cast(:destZip as numeric) and pgdd.destMaxZip >= cast(:destZip as numeric))
                        or (pgdd.dest_geo_serv_type = 4 and pgdd.destMinShortZip <= cast(:dest3DigitZip as numeric) and pgdd.destMaxShortZip >= cast(:dest3DigitZip as numeric))
                        or (pgdd.dest_geo_serv_type = 5 and (pgdd.dest_searchable_Geo_Value = :destCity or pgdd.dest_searchable_Geo_Value = :destZip))
                        or (pgdd.dest_geo_serv_type = 6 and pgdd.dest_searchable_Geo_Value = :destState)
                        or (pgdd.dest_geo_serv_type = 7 and pgdd.dest_searchable_Geo_Value = :destCountry)
                    )
            left join LTL_FAK_MAP lfm on lfm.LTL_PRICING_DETAIL_ID = lpde.LTL_PRICING_DETAIL_ID
                                      and :commodityClassEnum is not null
                                      and lfm.actual_class = :commodityClassEnum
            where lppe.status = 'A'
                and lppe.ltl_pricing_type = 'BENCHMARK'
                and (lppe.carrier_org_id in (:carrierOrgIds) or lppe.carrier_org_id = -1 or lppe.carrier_org_id is null)
                and lppe.shipper_org_id = :shipperOrgId
                and lppe.eff_date <= :shipDate
                and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                and (lpde.cost_appl_min_dist is null
                    or lpde.cost_appl_min_dist <= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
                and (lpde.cost_appl_max_dist is null
                    or lpde.cost_appl_max_dist >= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_CARRIER_RATES">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="prohibitedCommodities" type="string"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="aliasName" type="string"/>
        <return-scalar column="note" type="string"/>
        <return-scalar column="pricingDetailType" type="string"/>
        <return-scalar column="ratingCarrierType" type="string"/>
        <return-scalar column="mileageType" type="string"/>
        <return-scalar column="mileageVersion" type="string"/>
        <return-scalar column="smc3Tariff" type="string"/>
        <return-scalar column="mscale" type="string"/>
        <return-scalar column="carrierName" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="actualCarrierScac" type="string"/>
        <return-scalar column="currencyCode" type="string"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="minMarginFlat" type="java.math.BigDecimal"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="minMiles" type="java.math.BigDecimal"/>
        <return-scalar column="maxMiles" type="java.math.BigDecimal"/>
        <return-scalar column="geoLevel" type="int"/>
        <return-scalar column="freightClass" type="string"/>
        <return-scalar column="pricingDetailId" type="long"/>
        <return-scalar column="hideDetails" type="string"/>
        <return-scalar column="hideTerminalDetails" type="string"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="effectiveDate" type="date"/>
        <return-scalar column="useBlanket" type="string"/>
        <return-scalar column="blockedFrmBkng" type="string"/>
        <return-scalar column="fakMappingAvailable" type="string"/>
        <return-scalar column="singleFakMappingClass" type="string"/>
        <return-scalar column="integrationType" type="string"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <return-scalar column="dispatchWithLtllc" type="boolean"/>
        <![CDATA[
            select /*+ no_parallel LtlPricingProfileEntity.GET_CARRIER_RATES-v5 */
                coalesce(childLppe.ltl_pricing_profile_id, lppe.ltl_pricing_profile_id) as profileId,
                coalesce(childLppde.ltl_pric_prof_detail_id, lppde.ltl_pric_prof_detail_id) as profileDetailId,
                lppe.prohibited_commodities as prohibitedCommodities,
                lppe.carrier_org_id as carrierOrgId,
                coalesce(childLppe.ltl_pricing_type, lppe.ltl_pricing_type) as pricingType,
                coalesce(childLppe.alias_name, lppe.alias_name) as aliasName,
                lppe.note as note,
                lppde.pricing_detail_type as pricingDetailType,
                lppde.ltl_rating_carrier_type as ratingCarrierType,
                lppde.mileage_type as mileageType,
                lppde.mileage_version as mileageVersion,
                coalesce(lpde.smc3_tariff, lppde.smc3_tariff) as smc3Tariff,
                lppde.mscale as mscale,
                carr_org.name as carrierName,
                carr_org.scac as scac,
                coalesce(act_carrier.scac, carr_org.act_scac) as actualCarrierScac,
                carr_org.currency_code as currencyCode,
                lpde.cost_type as costType,
                lpde.unit_cost as unitCost,
                lpde.min_cost as minCost,
                coalesce(childLpde.margin_type, lpde.margin_type) as marginType,
                coalesce(childLpde.unit_margin, lpde.unit_margin) as unitMargin,
                coalesce(childLpde.margin_dollar_amt, lpde.margin_dollar_amt) as minMarginFlat,
                lpde.service_type as serviceType,
                lpde.cost_appl_min_dist as minMiles,
                lpde.cost_appl_max_dist as maxMiles,
                pgdo.orig_geo_serv_type + pgdd.dest_geo_serv_type as geoLevel,
                lpde.COMMODITY_CLASS as freightClass,
                lpde.LTL_PRICING_DETAIL_ID as pricingDetailId,
                case when lchpd.ltl_pricing_profile_id is not null then 'Y' else 'N' end as hideDetails,
                case when 'Y' = termInfo.visible then 'N' else 'Y' end as hideTerminalDetails,
                lpde.movement_type as movementType,
                lppe.eff_date as effectiveDate,
                lppde.use_blanket as useBlanket,
                coalesce(childLppe.BLOCKED_FROM_BOOKING, lppe.BLOCKED_FROM_BOOKING) as blockedFrmBkng,
                case when :commodityClassEnum is null
                        and (select count('X') from LTL_FAK_MAP lfm where lfm.LTL_PRICING_DETAIL_ID = lpde.LTL_PRICING_DETAIL_ID) > 0
                    then 'Y'
                    else 'N' end as fakMappingAvailable,
                lfm.MAPPING_CLASS as singleFakMappingClass,
                coalesce(orgSvc.pickup, 'EDI') as integrationType,
                :shipperOrgId as shipperOrgId,
                lppe.dispatch_with_ltllc dispatchWithLtllc
            from ltl_pricing_details lpde
            join ltl_pricing_profile_details lppde on lpde.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
            join ltl_pricing_profile lppe on lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                                          and lppe.status = 'A'
                                          and lppe.carrier_org_id not in (:palletCarriers)
                                          and lppe.eff_date <= :shipDate
                                          and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                                          and (lppe.carrier_org_id = :carrierOrgId or :carrierOrgId is null)
            join organizations carr_org on carr_org.org_id = lppe.carrier_org_id
                                        and carr_org.status = 'A'
            join PRICING_GEO_DETAILS_ORIG pgdo on lpde.ltl_pricing_detail_id = pgdo.ltl_pricing_detail_id
                                               and (
                                                   (pgdo.orig_geo_serv_type = 1 and pgdo.orig_searchable_Geo_Value = :originZip)
                                                   or (pgdo.orig_geo_serv_type = 2 and pgdo.orig_searchable_Geo_Value = :origin3DigitZip)
                                                   or (pgdo.orig_geo_serv_type = 3 and pgdo.origMinZip <= cast(:originZip as numeric) and pgdo.origMaxZip >= cast(:originZip as numeric))
                                                   or (pgdo.orig_geo_serv_type = 4 and pgdo.origMinShortZip <= cast(:origin3DigitZip as numeric) and pgdo.origMaxShortZip >= cast(:origin3DigitZip as numeric))
                                                   or (pgdo.orig_geo_serv_type = 5 and (pgdo.orig_searchable_Geo_Value = :originCity or pgdo.orig_searchable_Geo_Value = :originZip))
                                                   or (pgdo.orig_geo_serv_type = 6 and pgdo.orig_searchable_Geo_Value = :originState)
                                                   or (pgdo.orig_geo_serv_type = 7 and pgdo.orig_searchable_Geo_Value = :originCountry)
                                               )
            join PRICING_GEO_DETAILS_DEST pgdd on lpde.ltl_pricing_detail_id = pgdd.ltl_pricing_detail_id
                                               and pgdo.ltl_pricing_geo_service_id = pgdd.ltl_pricing_geo_service_id
                                               and (
                                                   (pgdd.dest_geo_serv_type = 1 and pgdd.dest_searchable_Geo_Value = :destZip)
                                                   or (pgdd.dest_geo_serv_type = 2 and pgdd.dest_searchable_Geo_Value = :dest3DigitZip)
                                                   or (pgdd.dest_geo_serv_type = 3 and pgdd.destMinZip <= cast(:destZip as numeric) and pgdd.destMaxZip >= cast(:destZip as numeric))
                                                   or (pgdd.dest_geo_serv_type = 4 and pgdd.destMinShortZip <= cast(:dest3DigitZip as numeric) and pgdd.destMaxShortZip >= cast(:dest3DigitZip as numeric))
                                                   or (pgdd.dest_geo_serv_type = 5 and (pgdd.dest_searchable_Geo_Value = :destCity or pgdd.dest_searchable_Geo_Value = :destZip))
                                                   or (pgdd.dest_geo_serv_type = 6 and pgdd.dest_searchable_Geo_Value = :destState)
                                                   or (pgdd.dest_geo_serv_type = 7 and pgdd.dest_searchable_Geo_Value = :destCountry)
                                               )
            left join organizations act_carrier on act_carrier.org_id = lppe.act_carrier_org_id
                                                and act_carrier.status = 'A'
            left join LTL_FAK_MAP lfm on lfm.LTL_PRICING_DETAIL_ID = lpde.LTL_PRICING_DETAIL_ID
                                      and :commodityClassEnum is not null
                                      and lfm.actual_class = :commodityClassEnum
            left join LTL_PRICING_TERMINAL_INFO termInfo on termInfo.LTL_PRIC_PROF_DETAIL_ID = lppe.ltl_pricing_profile_id
                                                         and termInfo.status = 'A'
            left join ltl_cust_hide_pric_details lchpd on lchpd.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id    --Customer/Carrier Profiles/Tier 1
                                                       and lchpd.shipper_org_id = :shipperOrgId
                                                       and lchpd.status = 'A'

            left join ORG_SERVICES orgSvc on orgSvc.ORG_ID = carr_org.org_id

            -- Blanket/CSP should be considered even if appropriate ltl_pricing_profile_details is not defined
            left join ltl_pricing_profile childLppe on lppe.ltl_pricing_type = 'BLANKET'
                                                    and childLppe.ltl_pricing_profile_id in (
                                                        select lpp2.ltl_pricing_profile_id from ltl_pricing_profile lpp2
                                                        join ltl_pricing_appl_cust applCust2 on applCust2.ltl_pricing_profile_id = lpp2.ltl_pricing_profile_id
                                                        where applCust2.shipper_org_id = :shipperOrgId and applCust2.status = 'A' and lpp2.status = 'A'
                                                            and lpp2.carrier_org_id = lppe.carrier_org_id and lpp2.LTL_PRICING_TYPE = 'BLANKET_CSP'
                                                    )
            left join ltl_pricing_profile_details childLppde on childLppde.ltl_pricing_profile_id = childLppe.ltl_pricing_profile_id
            left join ltl_pricing_details childLpde on childLpde.parent_id = lpde.ltl_pricing_detail_id                 -- this is pricing profile of Blanket/CSP profile if exists
                                                    and childLpde.ltl_pric_prof_detail_id = childLppde.ltl_pric_prof_detail_id

            left join ltl_pricing_appl_cust appl_cust on appl_cust.shipper_org_id = :shipperOrgId
                                                      and appl_cust.status = 'A'
                                                      and appl_cust.ltl_pricing_profile_id = coalesce(childLppe.ltl_pricing_profile_id, lppe.ltl_pricing_profile_id)

            left join organization_pricing org_pric on org_pric.org_id = :shipperOrgId
                                                    and org_pric.blk_serv_carrier_type = 1                              --Customer/Block Indirect Service Type
                                                    and org_pric.BLOCK_SERVICE_TYPE = lpde.service_type

            left join ltl_pricing_blocked_cust blocked_cust on blocked_cust.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id    --Customer/Carrier Profiles/Block
                                                            and blocked_cust.shipper_org_id = :shipperOrgId
                                                            and blocked_cust.status = 'A'

            left join pricing_blocked_geo_details blockedLanes on
                                         (
                                             (blockedLanes.orig_geo_serv_type = 1 and blockedLanes.orig_searchable_Geo_Value = :originZip)
                                             or (blockedLanes.orig_geo_serv_type = 2 and blockedLanes.orig_searchable_Geo_Value = :origin3DigitZip)
                                             or (blockedLanes.orig_geo_serv_type = 3 and blockedLanes.origMinZip <= cast(:originZip as numeric) and blockedLanes.origMaxZip >= cast(:originZip as numeric))
                                             or (blockedLanes.orig_geo_serv_type = 4 and blockedLanes.origMinShortZip <= cast(:origin3DigitZip as numeric) and blockedLanes.origMaxShortZip >= cast(:origin3DigitZip as numeric))
                                             or (blockedLanes.orig_geo_serv_type = 5 and (blockedLanes.orig_searchable_Geo_Value = :originCity or blockedLanes.orig_searchable_Geo_Value = :originZip))
                                             or (blockedLanes.orig_geo_serv_type = 6 and blockedLanes.orig_searchable_Geo_Value = :originState)
                                             or (blockedLanes.orig_geo_serv_type = 7 and blockedLanes.orig_searchable_Geo_Value = :originCountry)
                                         )
                                         and (
                                             (blockedLanes.dest_geo_serv_type = 1 and blockedLanes.dest_searchable_Geo_Value = :destZip)
                                             or (blockedLanes.dest_geo_serv_type = 2 and blockedLanes.dest_searchable_Geo_Value = :dest3DigitZip)
                                             or (blockedLanes.dest_geo_serv_type = 3 and blockedLanes.destMinZip <= cast(:destZip as numeric) and blockedLanes.destMaxZip >= cast(:destZip as numeric))
                                             or (blockedLanes.dest_geo_serv_type = 4 and blockedLanes.destMinShortZip <= cast(:dest3DigitZip as numeric) and blockedLanes.destMaxShortZip >= cast(:dest3DigitZip as numeric))
                                             or (blockedLanes.dest_geo_serv_type = 5 and (blockedLanes.dest_searchable_Geo_Value = :destCity or blockedLanes.dest_searchable_Geo_Value = :destZip))
                                             or (blockedLanes.dest_geo_serv_type = 6 and blockedLanes.dest_searchable_Geo_Value = :destState)
                                             or (blockedLanes.dest_geo_serv_type = 7 and blockedLanes.dest_searchable_Geo_Value = :destCountry)
                                         )
                                         and (
                                             (blockedLanes.customerId is null                                               --Pricing/Block Carrier Zip
                                                 and blockedLanes.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
                                             )
                                             or (:shipperOrgId is not null                                                  --Customer/Block Lane
                                                 and blockedLanes.customerId is not null
                                                 and blockedLanes.customerId = :shipperOrgId
                                                 and :shipDate between blockedLanes.eff_date and blockedLanes.exp_date
                                                 and (blockedLanes.CARRIERID = lppe.CARRIER_ORG_ID or blockedLanes.CARRIERID = -1)
                                                 and lppe.LTL_PRICING_TYPE = 'BLANKET'
                                                 and childLpde.ltl_pric_prof_detail_id is null
                                             )
                                         )
            where
                lpde.status = 'A'
                and lpde.movement_type in ('BOTH', :movementType)
                --Weight (pounds) filters
                and (lpde.COST_APPL_MIN_WT <= :totalWeight or lpde.COST_APPL_MIN_WT is null)
                and (lpde.COST_APPL_MAX_WT >= :totalWeight or lpde.COST_APPL_MAX_WT is null)
                --Distance (miles) filters
                and (lpde.cost_appl_min_dist is null
                    or lpde.cost_appl_min_dist <= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
                and (lpde.cost_appl_max_dist is null
                    or lpde.cost_appl_max_dist >= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
                and (lpde.eff_date is null or lpde.eff_date <= :shipDate)
                and (lpde.exp_date is null or lpde.exp_date >= :shipDate)
                and (:serviceType is null or lpde.service_type = :serviceType)
                and (:specificProfiles = 'N' or lppe.ltl_pricing_profile_id in (:pricingProfileIDs) or childLppe.ltl_pricing_profile_id in (:pricingProfileIDs))

                and blockedLanes.ltl_pric_prof_detail_id is null    --GET non blocked lanes (on profile level)
                and blocked_cust.ltl_blocked_cust_id is null        --GET non blocked carriers (on customer level)
                and blockedLanes.customerId is null                 --GET non blocked lanes (on customer level)
                and org_pric.BLOCK_SERVICE_TYPE is null             --Service Type should not be blocked

                --Get only applicable profiles: Blanket or Non Blanket but not both.
                and (appl_cust.ltl_pricing_profile_id is not null --these are non blanket
                    or (lppe.LTL_PRICING_TYPE = 'BLANKET'
                        and (
                            not exists ( -- no non-blanket tariff for specified customer
                                select 'X'
                                from ltl_pricing_profile lpp_new,
                                    ltl_pricing_appl_cust lpac
                                where lpac.shipper_org_id = :shipperOrgId
                                    and lpac.status = 'A'
                                    and lpp_new.status = 'A'
                                    and lpac.ltl_pricing_profile_id = lpp_new.ltl_pricing_profile_id
                                    and lpp_new.carrier_org_id = lppe.carrier_org_id
                                    and lpp_new.ltl_pricing_type <> 'BLANKET_CSP')
                            or exists ( -- non-blanket tariff with UseBlanket flag
                                select 'X'
                                from ltl_pricing_profile lpp_new,
                                    ltl_pricing_appl_cust lpac,
                                    LTL_PRICING_PROFILE_DETAILS lppde_new
                                where lpac.shipper_org_id = :shipperOrgId
                                    and lpac.status = 'A'
                                    and lpp_new.status = 'A'
                                    and lpac.ltl_pricing_profile_id = lpp_new.ltl_pricing_profile_id
                                    and lpp_new.carrier_org_id = lppe.carrier_org_id
                                    and lppde_new.LTL_PRICING_PROFILE_ID = lpp_new.LTL_PRICING_PROFILE_ID
                                    and lppde_new.USE_BLANKET = 'Y')
                        )
                    )
                )
            order by lpde.eff_date desc
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_FS_TRIGGERS">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="profileDetailType" type="string"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="dotRegionId" type="long"/>
        <return-scalar column="surcharge" type="java.math.BigDecimal"/>
        <return-scalar column="upchargeType" type="string"/>
        <return-scalar column="upchargeFlat" type="java.math.BigDecimal"/>
        <return-scalar column="upchargePercent" type="java.math.BigDecimal"/>
        <return-scalar column="effDay" type="string"/>
        <return-scalar column="geoLevel" type="int"/>
        <return-scalar column="ltlFuelId" type="long"/>
        <return-scalar column="ltlFuelSurchargeId" type="long"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                lppde.PRICING_DETAIL_TYPE as profileDetailType,
                lppe.ltl_pricing_type as pricingType,
                coalesce(lppe.carrier_org_id, -1) as carrierOrgId,
                lf.dot_region_id as dotRegionId,
                lfs.surcharge as surcharge,
                lf.upcharge_type as upchargeType,
                lf.upcharge_flat as upchargeFlat,
                lf.upcharge_percent as upchargePercent,
                lf.eff_day as effDay,
                orig.geo_serv_type as geoLevel,
                lf.ltl_fuel_id as ltlFuelId,
                lfs.ltl_fuel_surcharge_id as ltlFuelSurchargeId
            from ltl_pricing_profile lppe,
                ltl_pricing_profile_details lppde,
                ltl_fuel lf,
                ltl_fuel_geo_services lfgs,
                LTL_FUEL_SURCHARGE lfs,
                ltl_fuel_geo_serv_dtls orig,
                DOT_REGION_FUEL drf
            where lppe.status = 'A'
                and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                and lf.status = 'A'
                and lf.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
                and (lf.eff_date is null or lf.eff_date <= :shipDate)
                and (lf.exp_date is null or lf.exp_date >= :shipDate)
                and lfs.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
                and lfgs.ltl_fuel_id = lf.ltl_fuel_id
                and orig.ltl_fuel_geo_service_id = lfgs.ltl_fuel_geo_service_id
                and orig.geo_type = 1
                and lppde.ltl_pric_prof_detail_id in (:profileDetailIds)
                and drf.DOT_REGION_ID = lf.DOT_REGION_ID
                and drf.status = 'A'
                and lfs.status = 'A'
                and drf.fuel_charge >= lfs.min_rate
                and drf.fuel_charge <= lfs.max_rate
                and date_trunc('day', drf.eff_date) = (
                    case when lf.eff_day = 'MON' then date_trunc('day', cast(:monday as date)) else
                    case when lf.eff_day = 'TUE' then date_trunc('day', cast(:tuesday as date)) else
                    case when lf.eff_day = 'WED' then date_trunc('day', cast(:wednesday as date)) else
                    case when lf.eff_day = 'THU' then date_trunc('day', cast(:thursday as date)) else
                    case when lf.eff_day = 'FRI' then date_trunc('day', cast(:friday as date)) else
                    case when lf.eff_day = 'SAT' then date_trunc('day', cast(:saturday as date)) else
                    case when lf.eff_day = 'SUN' then date_trunc('day', cast(:sunday as date)) else
                    case when lf.eff_day = 'MON_1' then date_trunc('day', cast(:last_week_monday as date)) else
                    case when lf.eff_day = 'TUE_1' then date_trunc('day', cast(:last_week_tuesday as date)) else
                    case when lf.eff_day = 'WED_1' then date_trunc('day', cast(:last_week_wednesday as date)) else
                    case when lf.eff_day = 'THU_1' then date_trunc('day', cast(:last_week_thursday as date)) else
                    case when lf.eff_day = 'FRI_1' then date_trunc('day', cast(:last_week_friday as date)) else
                    case when lf.eff_day = 'SAT_1' then date_trunc('day', cast(:last_week_saturday as date)) else
                    date_trunc('day', cast(:last_week_sunday as date))
                    end end end end end end end end end end end end end
                )
                and ( (orig.geo_serv_type = 7 and orig.searchable_Geo_Value = :originCountry)
                    or (orig.geo_serv_type = 5 and orig.searchable_Geo_Value = :originCity)
                    or (orig.geo_serv_type = 6 and orig.searchable_Geo_Value = :originState)
                    or case when ((:originCountry = 'USA' or :originCountry = 'MEX')
                        and (
                            (orig.geo_serv_type = 1 and orig.searchable_Geo_Value = :originZip)
                            or (orig.geo_serv_type = 2 and orig.searchable_Geo_Value = :origin3DigitZip)
                            or (orig.geo_serv_type = 3 and length(orig.searchable_Geo_Value) = 11
                                and cast(substr(orig.searchable_Geo_Value, 1, 5) as numeric) <= cast(:originZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 7, 11) as numeric) >= cast(:originZip as numeric))
                            or (orig.geo_serv_type = 4 and length(orig.searchable_Geo_Value) = 7
                                and cast(substr(orig.searchable_Geo_Value, 1, 3) as numeric) <= cast(:origin3DigitZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 5, 7) as numeric) >= cast(:origin3DigitZip as numeric))
                        )) then 1 else 0 end = 1
                    or case when (:originCountry = 'CAN'
                        and (
                            (orig.geo_serv_type = 1 and orig.searchable_Geo_Value = :originZip)
                            or (orig.geo_serv_type = 2 and orig.searchable_Geo_Value = :origin3DigitZip)
                            or (orig.geo_serv_type = 3 and length(orig.searchable_Geo_Value) = 25
                                and cast(substr(orig.searchable_Geo_Value, 1, 12) as numeric) <= cast(:originZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 14, 25) as numeric) >= cast(:originZip as numeric))
                            or (orig.geo_serv_type = 4 and length(orig.searchable_Geo_Value) = 13
                                and cast(substr(orig.searchable_Geo_Value, 1, 6) as numeric) <= cast(:origin3DigitZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 8, 13) as numeric) >= cast(:origin3DigitZip as numeric))
                        )) then 1 else 0 end = 1
                    or (
                        :originCountry <> 'USA' and :originCountry <> 'MEX' and :originCountry <> 'CAN'
                        and orig.geo_serv_type = 5 and orig.searchable_Geo_Value = :originZip
                    )
                )
            order by lf.eff_date desc
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_GUARANTEED_RATES">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailType" type="string"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="applyBeforeFuel" type="string"/>
        <return-scalar column="bolCarrierName" type="string"/>
        <return-scalar column="chargeRuleType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="minMarginFlat" type="java.math.BigDecimal"/>
        <return-scalar column="time" type="int"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="maxCost" type="java.math.BigDecimal"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="serviceType" type="string"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.PRICING_DETAIL_TYPE as profileDetailType,
                lppe.ltl_pricing_type as pricingType,
                lgp.APPLY_BEFORE_FUEL as applyBeforeFuel,
                lgp.BOL_CARRIER_NAME as bolCarrierName,
                lgp.CHARGE_RULE_TYPE as chargeRuleType,
                lgp.UNIT_COST as unitCost,
                lgp.MIN_COST as minCost,
                lgp.UNIT_MARGIN as unitMargin,
                lgp.MIN_MARGIN as minMarginFlat,
                lgp.TIME as time,
                coalesce(lppe.CARRIER_ORG_ID, -1) as carrierOrgId,
                lgp.MAX_COST as maxCost,
                lgp.movement_type as movementType,
                lgp.service_type as serviceType
            from ltl_pricing_profile lppe,
                ltl_pricing_profile_details lppde,
                LTL_GUARANTEED_PRICE lgp
            where lppe.status = 'A'
                and lgp.movement_type in ('BOTH', :movementType)
                and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                and lppde.ltl_pric_prof_detail_id in (:profileDetailIds)
                and lgp.LTL_PRIC_PROF_DETAIL_ID = lppde.ltl_pric_prof_detail_id
                and lgp.status = 'A'
                and (lgp.time = -1 or lgp.time >= :guaranteed)
                and (lgp.eff_date <= :shipDate or lgp.eff_date is null )
                and (lgp.exp_date is null or lgp.exp_date >= :shipDate)
                and exists (
                    select 'X'
                    from LTL_GUARANTEED_PRICE
                    where  LTL_PRIC_PROF_DETAIL_ID = lppde.ltl_pric_prof_detail_id
                        and status = 'A'
                        and time = :guaranteed
                        and (eff_date <= LOCALTIMESTAMP or eff_date is null)
                        and (exp_date is null or exp_date >= LOCALTIMESTAMP)
                )
                and (lgp.COST_APPL_MIN_WT <= :totalWeight or lgp.COST_APPL_MIN_WT is null)
                and (lgp.COST_APPL_MAX_WT >= :totalWeight or lgp.COST_APPL_MAX_WT is null)
                and (lgp.cost_appl_min_dist is null
                    or lgp.cost_appl_min_dist <= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
                and (lgp.cost_appl_max_dist is null
                    or lgp.cost_appl_max_dist >= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
                and not exists (
                    select /*+ use_concat(or_predicates(8)) */ 'X'
                    from LTL_GUARAN_BLOCK_DEST_DTLS orig_block,
                        LTL_GUARAN_BLOCK_DEST_DTLS dest_block,
                        LTL_GUARAN_BLOCK_DEST lgbd
                    where lgbd.LTL_GUARANTEED_PRICE_ID = lgp.LTL_GUARANTEED_PRICE_ID
                        and ORIG_BLOCK.GEO_TYPE = 1
                        and dest_block.geo_type = 2
                        and ORIG_BLOCK.LTL_GUARAN_BLOCK_DEST_ID = lgbd.LTL_GUARAN_BLOCK_DEST_ID
                        and dest_block.LTL_GUARAN_BLOCK_DEST_ID = lgbd.LTL_GUARAN_BLOCK_DEST_ID
                        and ( (orig_block.geo_serv_type = 7 and orig_block.searchable_Geo_Value = :originCountry)
                            or (orig_block.geo_serv_type = 5 and orig_block.searchable_Geo_Value = :originCity)
                            or (orig_block.geo_serv_type = 6 and orig_block.searchable_Geo_Value = :originState)
                            or case when ((:originCountry = 'USA' or :originCountry = 'MEX')
                                and (
                                    (orig_block.geo_serv_type = 1 and orig_block.searchable_Geo_Value = :originZip)
                                    or (orig_block.geo_serv_type = 2 and orig_block.searchable_Geo_Value = :origin3DigitZip)
                                    or (orig_block.geo_serv_type = 3 and length(orig_block.searchable_Geo_Value) = 11
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 5) as numeric) <= cast(:originZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 7, 11) as numeric) >= cast(:originZip as numeric))
                                    or (orig_block.geo_serv_type = 4 and length(orig_block.searchable_Geo_Value) = 7
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 3) as numeric) <= cast(:origin3DigitZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 5, 7) as numeric) >= cast(:origin3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or case when (:originCountry = 'CAN'
                                and (
                                    (orig_block.geo_serv_type = 1 and orig_block.searchable_Geo_Value = :originZip)
                                    or (orig_block.geo_serv_type = 2 and orig_block.searchable_Geo_Value = :origin3DigitZip)
                                    or (orig_block.geo_serv_type = 3 and length(orig_block.searchable_Geo_Value) = 25
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 12) as numeric) <= cast(:originZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 14, 25) as numeric) >= cast(:originZip as numeric))
                                    or (orig_block.geo_serv_type = 4 and length(orig_block.searchable_Geo_Value) = 13
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 6) as numeric) <= cast(:origin3DigitZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 8, 13) as numeric) >= cast(:origin3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or (
                                :originCountry <> 'USA' and :originCountry <> 'MEX' and :originCountry <> 'CAN'
                                and orig_block.geo_serv_type = 5 and orig_block.searchable_Geo_Value = :originZip
                            )
                        )
                        and ( (dest_block.geo_serv_type = 7 and dest_block.searchable_Geo_Value = :destCountry)
                            or (dest_block.geo_serv_type = 5 and dest_block.searchable_Geo_Value = :destCity)
                            or (dest_block.geo_serv_type = 6 and dest_block.searchable_Geo_Value = :destState)
                            or case when ((:destCountry = 'USA' or :destCountry = 'MEX')
                                and (
                                    (dest_block.geo_serv_type = 1 and dest_block.searchable_Geo_Value = :destZip)
                                    or (dest_block.geo_serv_type = 2 and dest_block.searchable_Geo_Value in (:dest3DigitZip))
                                    or (dest_block.geo_serv_type = 3 and length(dest_block.searchable_Geo_Value) = 11
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 5) as numeric) <= cast(:destZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 7, 11) as numeric) >= cast(:destZip as numeric))
                                    or (dest_block.geo_serv_type = 4 and length(dest_block.searchable_Geo_Value) = 7
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 3) as numeric) <= cast(:dest3DigitZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 5, 7) as numeric) >= cast(:dest3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or case when (:destCountry = 'CAN'
                                and (
                                    (dest_block.geo_serv_type = 1 and dest_block.searchable_Geo_Value = :destZip)
                                    or (dest_block.geo_serv_type = 2 and dest_block.searchable_Geo_Value in (:dest3DigitZip))
                                    or (dest_block.geo_serv_type = 3 and length(dest_block.searchable_Geo_Value) = 25
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 12) as numeric) <= cast(:destZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 14, 25) as numeric) >= cast(:destZip as numeric))
                                    or (dest_block.geo_serv_type = 4 and length(dest_block.searchable_Geo_Value) = 13
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 6) as numeric) <= cast(:dest3DigitZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 8, 13) as numeric) >= cast(:dest3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or (
                                :destCountry <> 'USA' and :destCountry <> 'MEX' and :destCountry <> 'CAN'
                                and dest_block.geo_serv_type = 5 and dest_block.searchable_Geo_Value = :destZip
                            )
                        )
                )
            order by lgp.eff_date desc
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_ACCESSORIAL_RATES">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="profileDetailType" type="string"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="accessorialId" type="long"/>
        <return-scalar column="accessorialType" type="string"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="minMarginFlat" type="java.math.BigDecimal"/>
        <return-scalar column="description" type="string"/>
        <return-scalar column="accessorialGroup" type="string"/>
        <return-scalar column="geoLevel" type="int"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="minCost" type="java.math.BigDecimal"/>
        <return-scalar column="maxCost" type="java.math.BigDecimal"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="minLength" type="java.math.BigDecimal"/>
        <return-scalar column="minWidth" type="java.math.BigDecimal"/>
        <return-scalar column="applyBeforeFuel" type="string"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                lppde.PRICING_DETAIL_TYPE as profileDetailType,
                lppe.ltl_pricing_type as pricingType,
                la.LTL_ACCESSORIAL_ID as accessorialId,
                la.accessorial_type as accessorialType,
                la.cost_type as costType,
                la.unit_cost as unitCost,
                la.margin_type as marginType,
                la.unit_margin as unitMargin,
                la.margin_dollar_amt as minMarginFlat,
                atype.description as description,
                atype.applicable_to as accessorialGroup,
                orig.geo_serv_type + dest.geo_serv_type as geoLevel,
                coalesce(lppe.carrier_org_id, -1) as carrierOrgId,
                la.min_cost as minCost,
                la.max_cost as maxCost,
                la.movement_type as movementType,
                la.service_type as serviceType,
                la.COST_APPL_MIN_LENGTH as minLength,
                la.COST_APPL_MIN_WIDTH as minWidth,
                la.APPLY_BEFORE_FUEL as applyBeforeFuel
            from ltl_pricing_profile lppe,
                ltl_pricing_profile_details lppde,
                LTL_ACCESSORIALS la,
                rater.ACCESSORIAL_TYPES atype,
                LTL_ACC_GEO_SERVICES lags,
                ltl_acc_geo_serv_dtls orig,
                ltl_acc_geo_serv_dtls dest
            where lppe.status = 'A'
            and atype.status = 'A'
            and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
            and lppde.ltl_pric_prof_detail_id in (:profileDetailIds)
            and la.LTL_PRIC_PROF_DETAIL_ID = lppde.ltl_pric_prof_detail_id
            and la.movement_type in ('BOTH', :movementType)
            and la.status = 'A'
            and atype.ACCESSORIAL_TYPE_CODE = la.ACCESSORIAL_TYPE
            and (la.eff_date is null or la.eff_date <= :shipDate)
            and (la.exp_date is null or la.exp_date >= :shipDate)
                --If accessorial type is ODM then only check for min length and max length not weight values
                --If accessorial type is not ODM then only check for min and max weight not length values
            and ((la.accessorial_type != 'ODM'
                    and (la.COST_APPL_MIN_WT <= :totalWeight or la.COST_APPL_MIN_WT is null)
                    and (la.COST_APPL_MAX_WT >= :totalWeight or la.COST_APPL_MAX_WT is null))
                or (la.accessorial_type = 'ODM'
                    and ((la.COST_APPL_MAX_LENGTH >= :maxLength or la.COST_APPL_MAX_LENGTH is null)
                    OR (la.COST_APPL_MAX_WIDTH >= :maxWidth or la.COST_APPL_MAX_WIDTH is null)))
            )
            and (la.cost_appl_min_dist is null
                or la.cost_appl_min_dist <= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
            and (la.cost_appl_max_dist is null
                or la.cost_appl_max_dist >= (case when lppde.mileage_type = 'MILE_MAKER' then :milemakerMiles else :pcmilerMiles end))
            and lags.LTL_accessorial_id = la.ltl_accessorial_id
            and orig.LTL_ACC_GEO_SERVice_id = lags.LTL_ACC_GEO_SERVice_id
            and orig.geo_type = 1
            and dest.LTL_ACC_GEO_SERVice_id = lags.LTL_ACC_GEO_SERVice_id
            and dest.geo_type = 2
            and ((:specificAccessorials = 1 and (la.ACCESSORIAL_TYPE in (:accessorialTypes) or lppde.ltl_rating_carrier_type = 'CARRIER_API'))
                or (:specificAccessorials <> 1 and atype.applicable_to = 'ALL' and la.ACCESSORIAL_TYPE not in ('HZC')))
            and ( (orig.geo_serv_type = 7 and orig.searchable_Geo_Value = :originCountry)
                or (orig.geo_serv_type = 5 and orig.searchable_Geo_Value = :originCity)
                or (orig.geo_serv_type = 6 and orig.searchable_Geo_Value = :originState)
                or case when ((:originCountry = 'USA' or :originCountry = 'MEX')
                    and (
                        (orig.geo_serv_type = 1 and orig.searchable_Geo_Value = :originZip)
                        or (orig.geo_serv_type = 2 and orig.searchable_Geo_Value = :origin3DigitZip)
                        or (orig.geo_serv_type = 3 and length(orig.searchable_Geo_Value) = 11
                            and cast(substr(orig.searchable_Geo_Value, 1, 5) as numeric) <= cast(:originZip as numeric)
                            and cast(substr(orig.searchable_Geo_Value, 7, 11) as numeric) >= cast(:originZip as numeric))
                        or (orig.geo_serv_type = 4 and length(orig.searchable_Geo_Value) = 7
                            and cast(substr(orig.searchable_Geo_Value, 1, 3) as numeric) <= cast(:origin3DigitZip as numeric)
                            and cast(substr(orig.searchable_Geo_Value, 5, 7) as numeric) >= cast(:origin3DigitZip as numeric))
                    )) then 1 else 0 end = 1
                or case when (:originCountry = 'CAN'
                    and (
                        (orig.geo_serv_type = 1 and orig.searchable_Geo_Value = :originZip)
                        or (orig.geo_serv_type = 2 and orig.searchable_Geo_Value = :origin3DigitZip)
                        or (orig.geo_serv_type = 3 and length(orig.searchable_Geo_Value) = 25
                            and cast(substr(orig.searchable_Geo_Value, 1, 12) as numeric) <= cast(:originZip as numeric)
                            and cast(substr(orig.searchable_Geo_Value, 14, 25) as numeric) >= cast(:originZip as numeric))
                        or (orig.geo_serv_type = 4 and length(orig.searchable_Geo_Value) = 13
                            and cast(substr(orig.searchable_Geo_Value, 1, 6) as numeric) <= cast(:origin3DigitZip as numeric)
                            and cast(substr(orig.searchable_Geo_Value, 8, 13) as numeric) >= cast(:origin3DigitZip as numeric))
                    )) then 1 else 0 end = 1
                or (
                    :originCountry <> 'USA' and :originCountry <> 'MEX' and :originCountry <> 'CAN'
                    and orig.geo_serv_type = 5 and orig.searchable_Geo_Value = :originZip
                )
            )
            and ( (dest.geo_serv_type = 7 and dest.searchable_Geo_Value = :destCountry)
                or (dest.geo_serv_type = 5 and dest.searchable_Geo_Value = :destCity)
                or (dest.geo_serv_type = 6 and dest.searchable_Geo_Value = :destState)
                or case when ((:destCountry = 'USA' or :destCountry = 'MEX')
                    and (
                        (dest.geo_serv_type = 1 and dest.searchable_Geo_Value = :destZip)
                        or (dest.geo_serv_type = 2 and dest.searchable_Geo_Value in (:dest3DigitZip))
                        or (dest.geo_serv_type = 3 and length(dest.searchable_Geo_Value) = 11
                            and cast(substr(dest.searchable_Geo_Value, 1, 5) as numeric) <= cast(:destZip as numeric)
                            and cast(substr(dest.searchable_Geo_Value, 7, 11) as numeric) >= cast(:destZip as numeric))
                        or (dest.geo_serv_type = 4 and length(dest.searchable_Geo_Value) = 7
                            and cast(substr(dest.searchable_Geo_Value, 1, 3) as numeric) <= cast(:dest3DigitZip as numeric)
                            and cast(substr(dest.searchable_Geo_Value, 5, 7) as numeric) >= cast(:dest3DigitZip as numeric))
                    )) then 1 else 0 end = 1
                or case when (:destCountry = 'CAN'
                    and (
                        (dest.geo_serv_type = 1 and dest.searchable_Geo_Value = :destZip)
                        or (dest.geo_serv_type = 2 and dest.searchable_Geo_Value in (:dest3DigitZip))
                        or (dest.geo_serv_type = 3 and length(dest.searchable_Geo_Value) = 25
                            and cast(substr(dest.searchable_Geo_Value, 1, 12) as numeric) <= cast(:destZip as numeric)
                            and cast(substr(dest.searchable_Geo_Value, 14, 25) as numeric) >= cast(:destZip as numeric))
                        or (dest.geo_serv_type = 4 and length(dest.searchable_Geo_Value) = 13
                            and cast(substr(dest.searchable_Geo_Value, 1, 6) as numeric) <= cast(:dest3DigitZip as numeric)
                            and cast(substr(dest.searchable_Geo_Value, 8, 13) as numeric) >= cast(:dest3DigitZip as numeric))
                    )) then 1 else 0 end = 1
                or (
                    :destCountry <> 'USA' and :destCountry <> 'MEX' and :destCountry <> 'CAN'
                    and dest.geo_serv_type = 5 and dest.searchable_Geo_Value = :destZip
                )
            )
        order by la.eff_date desc
        ]]>
    </sql-query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_PALLET_RATES">
        <return-scalar column="profileId" type="long"/>
        <return-scalar column="profileDetailId" type="long"/>
        <return-scalar column="prohibitedCommodities" type="string"/>
        <return-scalar column="carrierOrgId" type="long"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="aliasName" type="string"/>
        <return-scalar column="note" type="string"/>
        <return-scalar column="pricingDetailType" type="string"/>
        <return-scalar column="ratingCarrierType" type="string"/>
        <return-scalar column="mileageType" type="string"/>
        <return-scalar column="mileageVersion" type="string"/>
        <return-scalar column="smc3Tariff" type="string"/>
        <return-scalar column="mscale" type="string"/>
        <return-scalar column="carrierName" type="string"/>
        <return-scalar column="scac" type="string"/>
        <return-scalar column="actualCarrierScac" type="string"/>
        <return-scalar column="currencyCode" type="string"/>
        <return-scalar column="pricingDetailId" type="long"/>
        <return-scalar column="costType" type="string"/>
        <return-scalar column="unitCost" type="java.math.BigDecimal"/>
        <return-scalar column="marginType" type="string"/>
        <return-scalar column="unitMargin" type="java.math.BigDecimal"/>
        <return-scalar column="transitTime" type="int"/>
        <return-scalar column="serviceType" type="string"/>
        <return-scalar column="geoLevel" type="int"/>
        <return-scalar column="hideDetails" type="string"/>
        <return-scalar column="hideTerminalDetails" type="string"/>
        <return-scalar column="movementType" type="string"/>
        <return-scalar column="effectiveDate" type="date"/>
        <return-scalar column="useBlanket" type="string"/>
        <return-scalar column="blockedFrmBkng" type="string"/>
        <return-scalar column="isExcludeFuel" type="string"/>
        <return-scalar column="integrationType" type="string"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <return-scalar column="dispatchWithLtllc" type="boolean"/>
        <![CDATA[
            select lppe.ltl_pricing_profile_id as profileId,
                lppde.ltl_pric_prof_detail_id as profileDetailId,
                lppe.prohibited_commodities as prohibitedCommodities,
                lppe.carrier_org_id as carrierOrgId,
                lppe.ltl_pricing_type as pricingType,
                lppe.alias_name as aliasName,
                lppe.note as note,
                lppde.pricing_detail_type as pricingDetailType,
                lppde.ltl_rating_carrier_type as ratingCarrierType,
                lppde.mileage_type as mileageType,
                lppde.mileage_version as mileageVersion,
                lppde.smc3_tariff as smc3Tariff,
                lppde.mscale as mscale,
                carr_org.name as carrierName,
                carr_org.scac as scac,
                case when (lppe.act_carrier_org_id is not null)
                    then (select scac from organizations where status = 'A' and org_id = lppe.act_carrier_org_id)
                    else carr_org.act_scac
                    end as actualCarrierScac,
                carr_org.currency_code as currencyCode,
                lpalletpde.LTL_PALLET_PRIC_DET_ID as pricingDetailId,
                lpalletpde.cost_type as costType,
                lpalletpde.unit_cost as unitCost,
                'MC' as marginType,
                lpalletpde.margin_percent as unitMargin, -- this is actually strange that margin percent is mapped to unit margin
                lpalletpde.transit_time as transitTime,
                lpalletpde.service_type as serviceType,
                orig.geo_serv_type + dest.geo_serv_type as geoLevel,
                case when (
                        select count('X')
                        from ltl_cust_hide_pric_details lchpd
                        where lchpd.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                            and lchpd.shipper_org_id = :shipperOrgId
                            and status = 'A'
                    ) > 0 then 'Y' else 'N' end as hideDetails,
                case when 'Y' = (select visible
                                 from LTL_PRICING_TERMINAL_INFO
                                 where LTL_PRIC_PROF_DETAIL_ID = lppe.ltl_pricing_profile_id and status = 'A')
                    then 'N' else 'Y' end as hideTerminalDetails,
                lpalletpde.movement_type as movementType,
                lppe.eff_date as effectiveDate,
                lppde.use_blanket as useBlanket,
                lppe.BLOCKED_FROM_BOOKING as blockedFrmBkng,
                case when lpalletpde.EXCLUDE_FUEL = 'Y' then 'TRUE' else 'FALSE' end as isExcludeFuel,
                coalesce(orgSvc.pickup, 'EDI') as integrationType,
                :shipperOrgId as shipperOrgId,
                lppe.dispatch_with_ltllc dispatchWithLtllc
            from ltl_pricing_profile_details lppde,
                LTL_PALLET_PRIC_DETAILS lpalletpde,
                LTL_ZONES lzFrom,
                LTL_ZONES lzTo,
                LTL_ZONE_GEO_SERVICES lzgsFrom,
                LTL_ZONE_GEO_SERVICES lzgsTo,
                LTL_ZONE_GEO_SERV_DTLS orig,
                LTL_ZONE_GEO_SERV_DTLS dest,
                organizations carr_org,
                ltl_pricing_profile lppe
                left join ORG_SERVICES orgSvc on orgSvc.ORG_ID = lppe.carrier_org_id
            where carr_org.status = 'A'
                and carr_org.org_id = lppe.carrier_org_id
                and lppe.status = 'A'
                and lppe.ltl_pricing_type in (:pricingTypes)
                and lpalletpde.movement_type in ('BOTH', :movementType)
                and lppde.ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                and lpalletpde.LTL_PRIC_PROF_DETAIL_ID = lppde.ltl_pric_prof_detail_id
                and lpalletpde.status = 'A'
                and lppe.eff_date <= :shipDate
                and (lppe.exp_date is null or lppe.exp_date >= :shipDate)
                and (lpalletpde.eff_date is null or lpalletpde.eff_date <= :shipDate)
                and (lpalletpde.exp_date is null or lpalletpde.exp_date >= :shipDate)
                and (lpalletpde.COST_APPL_MIN_WT <= :totalWeight or lpalletpde.COST_APPL_MIN_WT is null)
                and (lpalletpde.COST_APPL_MAX_WT >= :totalWeight or lpalletpde.COST_APPL_MAX_WT is null)
                and (lpalletpde.MIN_QTY <= :totalQuantity or lpalletpde.MIN_QTY is null)
                and (lpalletpde.MAX_QTY >= :totalQuantity or lpalletpde.MAX_QTY is null)
                and (:serviceType is null or lpalletpde.service_type = :serviceType)
                and lppe.ltl_pricing_profile_id not in (
                    select ltl_pricing_profile_id
                    from ltl_pricing_blocked_cust
                    where shipper_org_id = :shipperOrgId
                        and status = 'A'
                )
                    --Get only applicable profiles - Blanket or Non Blanket but not both.
                and (lppe.ltl_pricing_profile_id in (
                        select ltl_pricing_profile_id
                        from ltl_pricing_appl_cust
                        where shipper_org_id = :shipperOrgId
                            and status = 'A'
                            and ltl_pricing_profile_id = lppe.ltl_pricing_profile_id
                    )
                    or (lppe.LTL_PRICING_TYPE = 'BLANKET'
                        and (not exists (
                                select 'X'
                                from ltl_pricing_profile lpp_new,
                                    ltl_pricing_appl_cust lpac
                                where lpac.shipper_org_id = :shipperOrgId
                                    and lpac.status = 'A'
                                    and lpp_new.status = 'A'
                                    and lpac.ltl_pricing_profile_id = lpp_new.ltl_pricing_profile_id
                                    and lpp_new.carrier_org_id = lppe.carrier_org_id
                            )
                            or exists (
                                select 'X'
                                from ltl_pricing_profile lpp_new,
                                ltl_pricing_appl_cust lpac,
                                LTL_PRICING_PROFILE_DETAILS lppde_new
                                where lpac.shipper_org_id = :shipperOrgId
                                    and lpac.status = 'A'
                                    and lpp_new.status = 'A'
                                    and lpac.ltl_pricing_profile_id = lpp_new.ltl_pricing_profile_id
                                    and lpp_new.carrier_org_id = lppe.carrier_org_id
                                    and lppde_new.LTL_PRICING_PROFILE_ID = lpp_new.LTL_PRICING_PROFILE_ID
                                    and lppde_new.USE_BLANKET = 'Y'
                            )
                        )
                    )
                )
                and lpalletpde.zone_from = lzFrom.LTL_ZONE_ID
                and lzFrom.status = 'A'
                and lpalletpde.zone_to = lzTo.LTL_ZONE_ID
                and lzTo.status = 'A'
                and lzgsFrom.ltl_zone_id = lzFrom.LTL_ZONE_ID
                and lzgsTo.ltl_zone_id = lzTo.LTL_ZONE_ID
                and lzgsFrom.ltl_zone_geo_service_id = orig.ltl_zone_geo_service_id
                and lzgsTo.ltl_zone_geo_service_id = dest.ltl_zone_geo_service_id
                    --Exclude Blocked Carrier locations
                and not exists (
                    select /*+ use_concat(or_predicates(8)) */ 'X'
                    from ltl_bk_carr_geo_serv_dtls orig_block,
                        ltl_bk_carr_geo_serv_dtls dest_block,
                        LTL_BLOCK_CARR_GEO_SERVICES lbcgs
                    where status = 'A'
                        and lbcgs.ltl_pric_prof_detail_id = lppde.ltl_pric_prof_detail_id
                        and ORIG_BLOCK.GEO_TYPE = 1
                        and dest_block.geo_type = 2
                        and ORIG_BLOCK.ltl_block_carr_geo_service_id = lbcgs.ltl_block_carr_geo_service_id
                        and dest_block.ltl_block_carr_geo_service_id = lbcgs.ltl_block_carr_geo_service_id
                        and ( (orig_block.geo_serv_type = 7 and orig_block.searchable_Geo_Value = :originCountry)
                            or (orig_block.geo_serv_type = 5 and orig_block.searchable_Geo_Value = :originCity)
                            or (orig_block.geo_serv_type = 6 and orig_block.searchable_Geo_Value = :originState)
                            or case when ((:originCountry = 'USA' or :originCountry = 'MEX')
                                and (
                                    (orig_block.geo_serv_type = 1 and orig_block.searchable_Geo_Value = :originZip)
                                    or (orig_block.geo_serv_type = 2 and orig_block.searchable_Geo_Value = :origin3DigitZip)
                                    or (orig_block.geo_serv_type = 3 and length(orig_block.searchable_Geo_Value) = 11
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 5) as numeric) <= cast(:originZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 7, 11) as numeric) >= cast(:originZip as numeric))
                                    or (orig_block.geo_serv_type = 4 and length(orig_block.searchable_Geo_Value) = 7
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 3) as numeric) <= cast(:origin3DigitZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 5, 7) as numeric) >= cast(:origin3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or case when (:originCountry = 'CAN'
                                and (
                                    (orig_block.geo_serv_type = 1 and orig_block.searchable_Geo_Value = :originZip)
                                    or (orig_block.geo_serv_type = 2 and orig_block.searchable_Geo_Value = :origin3DigitZip)
                                    or (orig_block.geo_serv_type = 3 and length(orig_block.searchable_Geo_Value) = 25
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 12) as numeric) <= cast(:originZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 14, 25) as numeric) >= cast(:originZip as numeric))
                                    or (orig_block.geo_serv_type = 4 and length(orig_block.searchable_Geo_Value) = 13
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 6) as numeric) <= cast(:origin3DigitZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 8, 13) as numeric) >= cast(:origin3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or (
                                :originCountry <> 'USA' and :originCountry <> 'MEX' and :originCountry <> 'CAN'
                                and orig_block.geo_serv_type = 5 and orig_block.searchable_Geo_Value = :originZip
                            )
                        )
                        and ( (dest_block.geo_serv_type = 7 and dest_block.searchable_Geo_Value = :destCountry)
                            or (dest_block.geo_serv_type = 5 and dest_block.searchable_Geo_Value = :destCity)
                            or (dest_block.geo_serv_type = 6 and dest_block.searchable_Geo_Value = :destState)
                            or case when ((:destCountry = 'USA' or :destCountry = 'MEX')
                                and (
                                    (dest_block.geo_serv_type = 1 and dest_block.searchable_Geo_Value = :destZip)
                                    or (dest_block.geo_serv_type = 2 and dest_block.searchable_Geo_Value in (:dest3DigitZip))
                                    or (dest_block.geo_serv_type = 3 and length(dest_block.searchable_Geo_Value) = 11
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 5) as numeric) <= cast(:destZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 7, 11) as numeric) >= cast(:destZip as numeric))
                                    or (dest_block.geo_serv_type = 4 and length(dest_block.searchable_Geo_Value) = 7
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 3) as numeric) <= cast(:dest3DigitZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 5, 7) as numeric) >= cast(:dest3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or case when (:destCountry = 'CAN'
                                and (
                                    (dest_block.geo_serv_type = 1 and dest_block.searchable_Geo_Value = :destZip)
                                    or (dest_block.geo_serv_type = 2 and dest_block.searchable_Geo_Value in (:dest3DigitZip))
                                    or (dest_block.geo_serv_type = 3 and length(dest_block.searchable_Geo_Value) = 25
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 12) as numeric) <= cast(:destZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 14, 25) as numeric) >= cast(:destZip as numeric))
                                    or (dest_block.geo_serv_type = 4 and length(dest_block.searchable_Geo_Value) = 13
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 6) as numeric) <= cast(:dest3DigitZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 8, 13) as numeric) >= cast(:dest3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or (
                                :destCountry <> 'USA' and :destCountry <> 'MEX' and :destCountry <> 'CAN'
                                and dest_block.geo_serv_type = 5 and dest_block.searchable_Geo_Value = :destZip
                            )
                        )
                )
                and not exists (
                    select /*+ use_concat(or_predicates(8))*/ 'X'
                    from LTL_BK_LANE_GEO_SERV_DTLS orig_block,
                        LTL_BK_LANE_GEO_SERV_DTLS dest_block,
                        LTL_ORG_BLOCK_LANE lobl
                    where lobl.status = 'A'
                        and lobl.SHIPPER_ORG_ID = :shipperOrgId
                        and lobl.eff_date <= :shipDate
                        and (lobl.exp_date is null or date_trunc('day', lobl.exp_date) > :shipDate)
                        and (lobl.CARRIER_ORG_ID = lppe.CARRIER_ORG_ID or lobl.CARRIER_ORG_ID = -1)
                        and lppe.LTL_PRICING_TYPE = 'BLANKET'
                        and orig_block.GEO_TYPE = 1
                        and dest_block.geo_type = 2
                        and orig_block.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                        and dest_block.LTL_BLOCK_LANE_ID = lobl.LTL_BLOCK_LANE_ID
                        and ( (orig_block.geo_serv_type = 7 and orig_block.searchable_Geo_Value = :originCountry)
                            or (orig_block.geo_serv_type = 5 and orig_block.searchable_Geo_Value = :originCity)
                            or (orig_block.geo_serv_type = 6 and orig_block.searchable_Geo_Value = :originState)
                            or case when ((:originCountry = 'USA' or :originCountry = 'MEX')
                                and (
                                    (orig_block.geo_serv_type = 1 and orig_block.searchable_Geo_Value = :originZip)
                                    or (orig_block.geo_serv_type = 2 and orig_block.searchable_Geo_Value = :origin3DigitZip)
                                    or (orig_block.geo_serv_type = 3 and length(orig_block.searchable_Geo_Value) = 11
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 5) as numeric) <= cast(:originZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 7, 11) as numeric) >= cast(:originZip as numeric))
                                    or (orig_block.geo_serv_type = 4 and length(orig_block.searchable_Geo_Value) = 7
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 3) as numeric) <= cast(:origin3DigitZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 5, 7) as numeric) >= cast(:origin3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or case when (:originCountry = 'CAN'
                                and (
                                    (orig_block.geo_serv_type = 1 and orig_block.searchable_Geo_Value = :originZip)
                                    or (orig_block.geo_serv_type = 2 and orig_block.searchable_Geo_Value = :origin3DigitZip)
                                    or (orig_block.geo_serv_type = 3 and length(orig_block.searchable_Geo_Value) = 25
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 12) as numeric) <= cast(:originZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 14, 25) as numeric) >= cast(:originZip as numeric))
                                    or (orig_block.geo_serv_type = 4 and length(orig_block.searchable_Geo_Value) = 13
                                        and cast(substr(orig_block.searchable_Geo_Value, 1, 6) as numeric) <= cast(:origin3DigitZip as numeric)
                                        and cast(substr(orig_block.searchable_Geo_Value, 8, 13) as numeric) >= cast(:origin3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or (
                                :originCountry <> 'USA' and :originCountry <> 'MEX' and :originCountry <> 'CAN'
                                and orig_block.geo_serv_type = 5 and orig_block.searchable_Geo_Value = :originZip
                            )
                        )
                        and ( (dest_block.geo_serv_type = 7 and dest_block.searchable_Geo_Value = :destCountry)
                            or (dest_block.geo_serv_type = 5 and dest_block.searchable_Geo_Value = :destCity)
                            or (dest_block.geo_serv_type = 6 and dest_block.searchable_Geo_Value = :destState)
                            or case when ((:destCountry = 'USA' or :destCountry = 'MEX')
                                and (
                                    (dest_block.geo_serv_type = 1 and dest_block.searchable_Geo_Value = :destZip)
                                    or (dest_block.geo_serv_type = 2 and dest_block.searchable_Geo_Value in (:dest3DigitZip))
                                    or (dest_block.geo_serv_type = 3 and length(dest_block.searchable_Geo_Value) = 11
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 5) as numeric) <= cast(:destZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 7, 11) as numeric) >= cast(:destZip as numeric))
                                    or (dest_block.geo_serv_type = 4 and length(dest_block.searchable_Geo_Value) = 7
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 3) as numeric) <= cast(:dest3DigitZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 5, 7) as numeric) >= cast(:dest3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or case when (:destCountry = 'CAN'
                                and (
                                    (dest_block.geo_serv_type = 1 and dest_block.searchable_Geo_Value = :destZip)
                                    or (dest_block.geo_serv_type = 2 and dest_block.searchable_Geo_Value in (:dest3DigitZip))
                                    or (dest_block.geo_serv_type = 3 and length(dest_block.searchable_Geo_Value) = 25
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 12) as numeric) <= cast(:destZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 14, 25) as numeric) >= cast(:destZip as numeric))
                                    or (dest_block.geo_serv_type = 4 and length(dest_block.searchable_Geo_Value) = 13
                                        and cast(substr(dest_block.searchable_Geo_Value, 1, 6) as numeric) <= cast(:dest3DigitZip as numeric)
                                        and cast(substr(dest_block.searchable_Geo_Value, 8, 13) as numeric) >= cast(:dest3DigitZip as numeric))
                                )) then 1 else 0 end = 1
                            or (
                                :destCountry <> 'USA' and :destCountry <> 'MEX' and :destCountry <> 'CAN'
                                and dest_block.geo_serv_type = 5 and dest_block.searchable_Geo_Value = :destZip
                            )
                        )
                )
                and (:isBenchmarkOnly <> 1 or lppe.carrier_org_id in (:bmCarrierOrgIds))
                and (:carrierOrgId is null or lppe.carrier_org_id = :carrierOrgId)
                and ( (orig.geo_serv_type = 7 and orig.searchable_Geo_Value = :originCountry)
                    or (orig.geo_serv_type = 5 and orig.searchable_Geo_Value = :originCity)
                    or (orig.geo_serv_type = 6 and orig.searchable_Geo_Value = :originState)
                    or case when ((:originCountry = 'USA' or :originCountry = 'MEX')
                        and (
                            (orig.geo_serv_type = 1 and orig.searchable_Geo_Value = :originZip)
                            or (orig.geo_serv_type = 2 and orig.searchable_Geo_Value = :origin3DigitZip)
                            or (orig.geo_serv_type = 3 and length(orig.searchable_Geo_Value) = 11
                                and cast(substr(orig.searchable_Geo_Value, 1, 5) as numeric) <= cast(:originZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 7, 11) as numeric) >= cast(:originZip as numeric))
                            or (orig.geo_serv_type = 4 and length(orig.searchable_Geo_Value) = 7
                                and cast(substr(orig.searchable_Geo_Value, 1, 3) as numeric) <= cast(:origin3DigitZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 5, 7) as numeric) >= cast(:origin3DigitZip as numeric))
                        )) then 1 else 0 end = 1
                    or case when (:originCountry = 'CAN'
                        and (
                            (orig.geo_serv_type = 1 and orig.searchable_Geo_Value = :originZip)
                            or (orig.geo_serv_type = 2 and orig.searchable_Geo_Value = :origin3DigitZip)
                            or (orig.geo_serv_type = 3 and length(orig.searchable_Geo_Value) = 25
                                and cast(substr(orig.searchable_Geo_Value, 1, 12) as numeric) <= cast(:originZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 14, 25) as numeric) >= cast(:originZip as numeric))
                            or (orig.geo_serv_type = 4 and length(orig.searchable_Geo_Value) = 13
                                and cast(substr(orig.searchable_Geo_Value, 1, 6) as numeric) <= cast(:origin3DigitZip as numeric)
                                and cast(substr(orig.searchable_Geo_Value, 8, 13) as numeric) >= cast(:origin3DigitZip as numeric))
                        )) then 1 else 0 end = 1
                    or (
                        :originCountry <> 'USA' and :originCountry <> 'MEX' and :originCountry <> 'CAN'
                        and orig.geo_serv_type = 5 and orig.searchable_Geo_Value = :originZip
                    )
                )
                and ( (dest.geo_serv_type = 7 and dest.searchable_Geo_Value = :destCountry)
                    or (dest.geo_serv_type = 5 and dest.searchable_Geo_Value = :destCity)
                    or (dest.geo_serv_type = 6 and dest.searchable_Geo_Value = :destState)
                    or case when ((:destCountry = 'USA' or :destCountry = 'MEX')
                        and (
                            (dest.geo_serv_type = 1 and dest.searchable_Geo_Value = :destZip)
                            or (dest.geo_serv_type = 2 and dest.searchable_Geo_Value in (:dest3DigitZip))
                            or (dest.geo_serv_type = 3 and length(dest.searchable_Geo_Value) = 11
                                and cast(substr(dest.searchable_Geo_Value, 1, 5) as numeric) <= cast(:destZip as numeric)
                                and cast(substr(dest.searchable_Geo_Value, 7, 11) as numeric) >= cast(:destZip as numeric))
                            or (dest.geo_serv_type = 4 and length(dest.searchable_Geo_Value) = 7
                                and cast(substr(dest.searchable_Geo_Value, 1, 3) as numeric) <= cast(:dest3DigitZip as numeric)
                                and cast(substr(dest.searchable_Geo_Value, 5, 7) as numeric) >= cast(:dest3DigitZip as numeric))
                        )) then 1 else 0 end = 1
                    or case when (:destCountry = 'CAN'
                        and (
                            (dest.geo_serv_type = 1 and dest.searchable_Geo_Value = :destZip)
                            or (dest.geo_serv_type = 2 and dest.searchable_Geo_Value in (:dest3DigitZip))
                            or (dest.geo_serv_type = 3 and length(dest.searchable_Geo_Value) = 25
                                and cast(substr(dest.searchable_Geo_Value, 1, 12) as numeric) <= cast(:destZip as numeric)
                                and cast(substr(dest.searchable_Geo_Value, 14, 25) as numeric) >= cast(:destZip as numeric))
                            or (dest.geo_serv_type = 4 and length(dest.searchable_Geo_Value) = 13
                                and cast(substr(dest.searchable_Geo_Value, 1, 6) as numeric) <= cast(:dest3DigitZip as numeric)
                                and cast(substr(dest.searchable_Geo_Value, 8, 13) as numeric) >= cast(:dest3DigitZip as numeric))
                        )) then 1 else 0 end = 1
                    or (
                        :destCountry <> 'USA' and :destCountry <> 'MEX' and :destCountry <> 'CAN'
                        and dest.geo_serv_type = 5 and dest.searchable_Geo_Value = :destZip
                    )
                )
            order by lpalletpde.eff_date desc
        ]]>
    </sql-query>
    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_DUPLICATE_PROFILES">
        <![CDATA[
            select p.id
            from LtlPricingProfileEntity p
            left join p.carrierOrganization co
            join p.applicableCustomers ac with :isFilterByCustomers <> 1 or ac.customer.id in (:applicableCustomers)
            where p.status = 'A'
                and p.ltlPricingType in ('BLANKET_CSP', 'BUY_SELL', 'CSP')
                and ((cast(:expDate as date) is not null and p.effDate <= cast(:expDate as date) and (p.expDate >= cast(:effDate as date) or p.expDate is null))
                    or (cast(:expDate as date) is null and (p.expDate is null or p.expDate >= cast(:effDate as date)))
                )
                and (co.id = :carrierId or :carrierId is null)
                and (p.id <> :profileId or :profileId is null)
        ]]>
    </query>
    <sql-query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.GET_CUSTOMER_PROFILES">
        <return-scalar column="ltlPricingProfileId" type="long"/>
        <return-scalar column="carrierName" type="string"/>
        <return-scalar column="effDate" type="date"/>
        <return-scalar column="expDate" type="date"/>
        <return-scalar column="pricingType" type="string"/>
        <return-scalar column="pricingTypeDesc" type="string"/>
        <return-scalar column="blocked" type="string"/>
        <return-scalar column="tier1" type="string"/>
        <return-scalar column="shipperOrgId" type="long"/>
        <return-scalar column="carrierType" type="string"/>
        <![CDATA[
            SELECT LPPE.LTL_PRICING_PROFILE_ID as ltlPricingProfileId,
                CARR_ORG.NAME as carrierName,
                LPPE.EFF_DATE as effDate,
                LPPE.EXP_DATE as expDate,
                LPE.LTL_PRICING_TYPE as pricingType,
                LPE.DESCRIPTION as pricingTypeDesc,
                case when LPBC.LTL_BLOCKED_CUST_ID > 0 then 'TRUE' else 'FALSE' end as blocked,
                case when LCHPD.CUST_HIDE_PRIC_DETAIL_ID > 0 then 'TRUE' else 'FALSE' end as tier1,
                :shipperOrgId AS shipperOrgId,
                PD.LTL_RATING_CARRIER_TYPE as carrierType
            FROM ORGANIZATIONS CARR_ORG, LTL_PRICING_TYPES lpe, LTL_PRICING_PROFILE LPPE
                LEFT OUTER JOIN LTL_PRICING_BLOCKED_CUST LPBC ON LPBC.STATUS = 'A' AND
                       LPBC.LTL_PRICING_PROFILE_ID = LPPE.LTL_PRICING_PROFILE_ID AND LPBC.SHIPPER_ORG_ID = :shipperOrgId
                LEFT OUTER JOIN LTL_CUST_HIDE_PRIC_DETAILS LCHPD ON LCHPD.STATUS = 'A' AND
                       LCHPD.LTL_PRICING_PROFILE_ID = LPPE.LTL_PRICING_PROFILE_ID AND LCHPD.SHIPPER_ORG_ID = :shipperOrgId
                LEFT OUTER JOIN LTL_PRICING_PROFILE_DETAILS PD ON PD.LTL_PRICING_PROFILE_ID = LPPE.LTL_PRICING_PROFILE_ID
            WHERE LPPE.STATUS = 'A' AND lpe.LTL_PRICING_TYPE = LPPE.LTL_PRICING_TYPE
                AND CARR_ORG.ORG_ID = LPPE.CARRIER_ORG_ID AND LPPE.SHIPPER_ORG_ID IS NULL
                AND (EXISTS (SELECT 'X' from LTL_PRICING_APPL_CUST WHERE SHIPPER_ORG_ID = :shipperOrgId
                AND LTL_PRICING_PROFILE_ID = LPPE.LTL_PRICING_PROFILE_ID AND STATUS = 'A')
                 OR (LPPE.LTL_PRICING_TYPE = 'BLANKET' AND NOT EXISTS (SELECT 'X' from LTL_PRICING_APPL_CUST
                     WHERE SHIPPER_ORG_ID = :shipperOrgId AND LTL_PRICING_PROFILE_ID = LPPE.LTL_PRICING_PROFILE_ID AND STATUS = 'A')))
        ]]>
    </sql-query>
    <query name="com.pls.ltlrating.domain.profile.LtlPricingProfileEntity.Q_GET_BLANKET_IDS_BY_CARRIERS_IDS">
        <![CDATA[
            select id
            from LtlPricingProfileEntity
            where carrierOrganization.id in (:carriersIDs)
                and pricingType = 'BLANKET'
        ]]>
    </query>
</hibernate-mapping>