<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <sql-query name="com.pls.user.domain.CapabilityEntity.Q_GET_USERS_WITH_CAPABILITY">
        <return-scalar column="personId" type="long"/>
        <return-scalar column="name" type="string"/>
        <return-scalar column="userid" type="string"/>
        <return-scalar column="directPermission" type="string"/>
        <return-scalar column="roles" type="string"/>
        <![CDATA[
            select person_id "personId", first_name || ' ' || last_name "name", userid,
                   string_agg(directPermission, ',') "directPermission",
                   string_agg(roles, ', ') "roles"
            from (
                select users.person_id, users.first_name, users.last_name,  users.userid, 'Y' directPermission, '' roles
                  from users join user_capabilities_xref ucl on users.person_id = ucl.person_id and ucl.status = 'A'
                  where users.status = 'A' and  ucl.capability_id = :capabilityId and (:orgId is null or users.org_id = :orgId)
                union all
                select users.person_id, users.first_name, users.last_name, users.userid, '' directPermission,  groups.name
                  from users join user_groups ug on users.person_id = ug.person_id and  ug.status = 'A'
                    join group_capabilities gc on ug.group_id = gc.group_id and gc.status = 'A'
                    join groups on groups.group_id = ug.group_id and groups.status = 'A'
                  where users.status = 'A'  and gc.capability_id = :capabilityId and (:orgId is null or users.org_id = :orgId)
            ) t
            group by person_id, first_name, last_name, userid
        ]]>
    </sql-query>
</hibernate-mapping>