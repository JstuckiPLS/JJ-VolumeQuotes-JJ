<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <query name="com.pls.user.domain.AnnouncementEntity.Q_UPDATE_STATUS">
        <![CDATA[
            update AnnouncementEntity a set a.status = :status, a.modification.modifiedBy =:modifiedBy, a.modification.modifiedDate = LOCALTIMESTAMP
            where a.id=:id
        ]]>
    </query>
    <query name="com.pls.user.domain.AnnouncementEntity.Q_GET_BY_STATUS_AND_PERIOD">
        <![CDATA[
            select
                a.id as id,
                a.theme as theme,
                a.text as text,
                au.firstName || ' ' ||  au.lastName as announcer,
                a.startDate as startDate,
                a.endDate as endDate,
                a.modification.createdUser.firstName || ' ' ||  a.modification.createdUser.lastName as createdBy,
                a.modification.modifiedUser.firstName || ' ' ||  a.modification.modifiedUser.lastName as modifiedBy,
                a.status as status,
                a.publishedDate as publishingDate,
                case when ah.personId is null
                    and LOCALTIMESTAMP BETWEEN a.startDate and a.endDate
                then FALSE else TRUE end as isAnnouncementRead
            from AnnouncementEntity a
            left join a.announcer au
            left join a.announcementHistory ah with ah.personId = :personId
            where a.status in (:statuses)
                and (cast(:from as date) is null or date_trunc('day', a.startDate) >= cast(:from as date))
                and (cast(:to as date) is null or date_trunc('day', a.startDate) <= cast(:to as date))
        ]]>
    </query>
    <query name="com.pls.user.domain.AnnouncementEntity.Q_GET_UNPUBLISHED">
        <![CDATA[
            select
                a.id as id,
                a.theme as theme,
                a.text as text,
                a.startDate as startDate,
                a.endDate as endDate,
                a.modification.createdUser.firstName || ' ' ||  a.modification.createdUser.lastName as createdBy,
                a.modification.modifiedUser.firstName || ' ' ||  a.modification.modifiedUser.lastName as modifiedBy,
                a.status as status
            from AnnouncementEntity a
            where a.status = 'U'
        ]]>
    </query>
    <query name="com.pls.user.domain.AnnouncementEntity.Q_GET_UNREAD_COUNT">
        <![CDATA[
            select count(*)
            from AnnouncementEntity a
            where a.status = 'P'
                and LOCALTIMESTAMP BETWEEN a.startDate and a.endDate
                and a.id not in (select ah.announcementId
                    from AnnouncementHistoryEntity ah
                    where ah.personId = :personId)
        ]]>
    </query>
</hibernate-mapping>